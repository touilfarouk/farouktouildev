(self.webpackChunk_arwes_app_play=self.webpackChunk_arwes_app_play||[]).push([[295],{1295:(e,n,t)=>{"use strict";t.r(n),t.d(n,{sandboxes:()=>r});const r=[{name:"Visual Design",children:[{name:"@arwes/theme",children:[{name:"createThemeUnit",children:[{name:"basic",code:t(1147)}]},{name:"createThemeColor",children:[{name:"basic",code:t(3556)},{name:"variations",code:t(8514)},{name:"alpha",code:t(8415)}]},{name:"createThemeStyle",children:[{name:"basic",code:t(7826)}]},{name:"createThemeBreakpoints",children:[{name:"basic",code:t(8155)},{name:"series",code:t(839)},{name:"labels",code:t(9304)}]},{name:"createCreateTheme",children:[{name:"basic",code:t(9159)}]},{name:"createAppTheme",children:[{name:"basic",code:t(9524)},{name:"extension",code:t(4485)},{name:"colors",code:t(2529)},{name:"colorsCustom",code:t(8914)}]}]},!1].filter(Boolean)},{name:"Motion Design",children:[{name:"@arwes/animator",children:[{name:"createAnimatorSystem",children:[{name:"basic",code:t(2853)}]}]},{name:"@arwes/animated",children:[{name:"createAnimation",children:[{name:"basic",code:t(6625)},{name:"easing",code:t(9875)}]}]},{name:"@arwes/react-animator",children:[{name:"Animator",children:[{name:"basic",code:t(6704)},{name:"nesting",code:t(7934)},{name:"combine",code:t(8908)},{name:"combineNesting",code:t(3972)},{name:"root",code:t(8863)},{name:"managerStagger",code:t(5664)},{name:"managerSequence",code:t(3471)},{name:"managerSwitch",code:t(4437)},{name:"unmountOn",code:t(5663)},{name:"condition",code:t(314)},{name:"initialState",code:t(8399)},{name:"disabled",code:t(5144)},{name:"dismissed",code:t(1994)},{name:"dynamicRendering",code:t(1866)},{name:"externalManagement",code:t(9234)},{name:"subsystemsTransitions",code:t(2438)},{name:"scrollList",code:t(4164)}]},{name:"AnimatorGeneralProvider",children:[{name:"basic",code:t(5917)}]}]},{name:"@arwes/react-animated",children:[{name:"Animated",children:[{name:"basic",code:t(2756)},{name:"functions",code:t(989)},{name:"composition",code:t(8209)},{name:"hidden",code:t(705)},{name:"disabled",code:t(2790)}]},{name:"AnimatedX",children:[{name:"basic",code:t(3610)},{name:"options",code:t(1953)},{name:"disabled",code:t(5141)}]},{name:"animations",children:[{name:"basic",code:t(2391)}]}]}]},{name:"Audio Design",children:[{name:"@arwes/bleeps",children:[{name:"createBleep",children:[{name:"basic",code:t(6047)},{name:"looping",code:t(4387)},{name:"sources",code:t(1540)},{name:"dynamic",code:t(819)}]},{name:"createBleepsManager",children:[{name:"basic",code:t(5945)},{name:"categories",code:t(5958)},{name:"dynamic",code:t(8611)}]}]},{name:"@arwes/react-bleeps",children:[{name:"BleepsProvider",children:[{name:"basic",code:t(5095)}]}]}]},{name:"Components",children:[{name:"@arwes/core",children:[{name:"createAppStylesBaseline",children:[{name:"basic",code:t(8204)},{name:"light",code:t(4515)}]}]},{name:"@arwes/react-text",children:[{name:"Text",children:[{name:"base",code:t(7524)},{name:"basic",code:t(3597)},{name:"multiple",code:t(9711)},{name:"managerDecipher",code:t(5039)},{name:"updates",code:t(5170)},{name:"intercepting",code:t(9645)}]}]},{name:"@arwes/frames",children:[{name:"createFrameOctagonClip",children:[{name:"basic",code:t(9389)},{name:"corners",code:t(8508)}]},{name:"createFrameKranoxClip",children:[{name:"basic",code:t(3512)},{name:"lengths",code:t(2013)}]}]},{name:"@arwes/react-frames",children:[{name:"useFrameSVGRenderer",children:[{name:"basic",code:t(6222)},{name:"commands",code:t(4213)},{name:"clipping",code:t(9496)}]},{name:"FrameSVG",children:[{name:"basic",code:t(7570)}]},{name:"FrameSVGOctagon",children:[{name:"basic",code:t(8951)},{name:"corners",code:t(2637)},{name:"assembling",code:t(2083)}]},{name:"FrameSVGUnderline",children:[{name:"basic",code:t(2108)},{name:"squareSize",code:t(5296)},{name:"assembling",code:t(8297)}]},{name:"FrameSVGCorners",children:[{name:"basic",code:t(133)},{name:"corners",code:t(5109)},{name:"assembling",code:t(9877)}]},{name:"FrameSVGLines",children:[{name:"basic",code:t(2395)},{name:"lines",code:t(6441)},{name:"assembling",code:t(3539)}]},{name:"FrameSVGNefrex",children:[{name:"basic",code:t(8005)},{name:"assembling",code:t(6270)}]},{name:"FrameSVGKranox",children:[{name:"basic",code:t(7918)},{name:"assembling",code:t(2330)}]},{name:"IlluminatorSVG",children:[{name:"basic",code:t(9420)}]},{name:"Illuminator",children:[{name:"basic",code:t(234)}]}]},{name:"@arwes/react-bgs",children:[{name:"Dots",children:[{name:"basic",code:t(3138)},{name:"variation",code:t(5121)},{name:"tiles",code:t(4968)}]},{name:"Puffs",children:[{name:"basic",code:t(8139)},{name:"customDirection",code:t(5541)},{name:"randomDirections",code:t(2965)}]},{name:"GridLines",children:[{name:"basic",code:t(4945)},{name:"dashes",code:t(1281)}]},{name:"MovingLines",children:[{name:"basic",code:t(6536)},{name:"composition",code:t(9064)}]}]},{name:"@arwes/react-core",children:[{name:"BleepsOnAnimator",children:[{name:"basic",code:t(8031)}]}]}]}]},6625:e=>{e.exports="import { createAnimation } from '@arwes/animated';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <style>\n    .item {\n      margin: 20px;\n      width: 40px;\n      height: 40px;\n      background-color: #0ff;\n    }\n  </style>\n\n  <div class=\"item\"></div>\n`;\n\nconst itemElement = rootElement.querySelector('.item') as HTMLDivElement;\n\ncreateAnimation({\n  duration: 1,\n  easing: 'inOutSine',\n  onUpdate: progress => {\n    itemElement.style.transform = `translateX(${progress * 200}px)`;\n  },\n  onComplete: () => {\n    itemElement.style.backgroundColor = '#ff0';\n  }\n});\n"},9875:e=>{e.exports="import { easing, createAnimation } from '@arwes/animated';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <style>\n    .easings {\n      display: grid;\n      gap: 4px;\n    }\n    .item {\n      padding: 2px;\n      width: 80px;\n      background-color: #077;\n      color: #fff;\n    }\n  </style>\n\n  <div class=\"easings\"></div>\n`;\n\nconst easingsElement = rootElement.querySelector('.easings') as HTMLDivElement;\nconst easingNames = Object.keys(easing) as Array<keyof typeof easing>;\n\neasingNames.forEach(easingName => {\n  const itemElement = document.createElement('div');\n  itemElement.classList.add('item');\n  itemElement.textContent = easingName;\n  easingsElement.appendChild(itemElement);\n\n  createAnimation({\n    duration: 1,\n    easing: easingName,\n    onUpdate: progress => {\n      itemElement.style.transform = `translateX(${progress * 200}px)`;\n    }\n  });\n});\n"},2853:e=>{e.exports="// The \"createAnimatorSystem\" API is supposed to be used with abstractions APIs\n// such as packages \"@arwes/react-animator\" and \"@arwes/react-animated\".\n// This is just a brief example.\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n\nimport { animate } from 'motion';\nimport {\n  type AnimatorControl,\n  type AnimatorNode,\n  type AnimatorDuration,\n  type AnimatorSettingsPartial,\n  ANIMATOR_DEFAULT_DURATION,\n  ANIMATOR_DEFAULT_SETTINGS,\n  createAnimatorSystem\n} from '@arwes/animator';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <style>\n    .item {\n      margin: 10px;\n      width: 40px;\n      height: 20px;\n      background-color: #777;\n    }\n    .margin-left {\n      margin-left: 20px;\n    }\n  </style>\n\n  <div>\n    <div id=\"parent\" class=\"item\"></div>\n    <div class=\"margin-left\">\n      <div id=\"child1\" class=\"item\"></div>\n      <div id=\"child2\" class=\"item\"></div>\n      <div id=\"child3\" class=\"item\"></div>\n    </div>\n  </div>\n`;\n\nconst system = createAnimatorSystem();\n\nconst createNode = (\n  parentNode: AnimatorNode | null,\n  element: HTMLElement,\n  getSettings?: () => AnimatorSettingsPartial\n): AnimatorNode => {\n  // Animator node control. It is used as an interface from UI components to\n  // the animator node.\n  const control: AnimatorControl = {\n    // If a node is a parent, it will expect an \"active\" value to change from\n    // transition between states. Otherwise, it will listen to its parent node.\n    getSettings: () => {\n      const providedSettings = getSettings?.();\n      return {\n        // Send the default animator settings.\n        ...ANIMATOR_DEFAULT_SETTINGS,\n\n        duration: {\n          ...ANIMATOR_DEFAULT_DURATION,\n          ...providedSettings?.duration\n        } as AnimatorDuration\n      };\n    },\n    getDynamicSettings: () => null,\n    setDynamicSettings: () => null,\n    getForeignRef: () => null,\n    setForeignRef: () => null\n  };\n\n  // Create a new node in the system with the parent node reference.\n  // If parent is not defined, it will be the root node.\n  const node = system.register(parentNode, control);\n\n  // Subscribe to node state changes.\n  node.subscribe(() => {\n    const { duration } = node;\n\n    switch (node.state) {\n      case 'entering': {\n        animate(\n          element,\n          { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n          { duration: duration.enter }\n        );\n        break;\n      }\n      case 'exiting': {\n        animate(\n          element,\n          { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] },\n          { duration: duration.exit }\n        );\n        break;\n      }\n    }\n  });\n\n  // Setup initial node state based on \"control.getSettings()\" value.\n  node.send('setup');\n\n  return node;\n};\n\n// A variable to know when the parent node should be active or not.\nlet isActive = true;\n\nconst parentNode = createNode(\n  null,\n  rootElement.querySelector('#parent') as HTMLDivElement,\n  () => ({ active: isActive, manager: 'stagger' })\n);\n\ncreateNode(parentNode, rootElement.querySelector('#child1') as HTMLDivElement);\ncreateNode(parentNode, rootElement.querySelector('#child2') as HTMLDivElement);\ncreateNode(parentNode, rootElement.querySelector('#child3') as HTMLDivElement);\n\nsetInterval(() => {\n  isActive = !isActive;\n\n  // When a node updates its settings, trigger an update event so it can\n  // review the changes and act accordingly.\n  parentNode.send('update');\n}, 2000);\n"},6047:e=>{e.exports="import { createBleep } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = '<button class=\"bleep\">Bleep!</button>';\n\nconst bleepElement = rootElement.querySelector('.bleep') as HTMLButtonElement;\n\nconst bleep = createBleep({\n  sources: [\n    { src: '/assets/sounds/click.mp3', type: 'audio/mpeg' }\n  ]\n});\n\nbleepElement.addEventListener('click', () => {\n  bleep?.play();\n});\n"},819:e=>{e.exports="import { createBleep } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <button class=\"bleep\">Bleep</button>\n  <button class=\"update\">Volume Down</button>\n`;\n\nconst bleepElement = rootElement.querySelector('.bleep') as HTMLButtonElement;\nconst updateElement = rootElement.querySelector('.update') as HTMLButtonElement;\n\nlet volume = 1;\n\nconst bleep = createBleep({\n  sources: [\n    { src: '/assets/sounds/click.mp3', type: 'audio/mpeg' }\n  ],\n  volume\n});\n\nbleepElement.addEventListener('click', () => {\n  bleep?.play();\n});\n\nupdateElement.addEventListener('click', () => {\n  if (bleep) {\n    const isVolumeUp = volume === 1;\n    volume = isVolumeUp ? 0.25 : 1;\n\n    bleep.update({ volume });\n    updateElement.textContent = isVolumeUp ? 'Volume Up' : 'Volume Down';\n  }\n});\n"},4387:e=>{e.exports="import { createBleep } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = '<button class=\"bleep\">Play</button>';\n\nconst bleepElement = rootElement.querySelector('.bleep') as HTMLButtonElement;\n\nconst bleep = createBleep({\n  sources: [{ src: '/assets/sounds/type.mp3', type: 'audio/mpeg' }],\n  loop: true,\n  volume: 0.5\n});\n\nbleepElement.addEventListener('click', () => {\n  if (bleep) {\n    if (bleep.isPlaying) {\n      bleep.stop();\n      bleepElement.textContent = 'Play';\n    }\n    else {\n      bleep.play();\n      bleepElement.textContent = 'Stop';\n    }\n  }\n});\n"},1540:e=>{e.exports="import { createBleep } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <button class=\"playAll\">Play All</button>\n  <button class=\"stopOne\">Stop One</button>\n  <button class=\"stopAll\">Stop All</button>\n`;\n\nconst playAllElement = rootElement.querySelector('.playAll') as HTMLButtonElement;\nconst stopOneElement = rootElement.querySelector('.stopOne') as HTMLButtonElement;\nconst stopAllElement = rootElement.querySelector('.stopAll') as HTMLButtonElement;\n\nconst bleep = createBleep({\n  sources: [\n    { src: '/assets/sounds/type.webm', type: 'audio/webm' },\n    { src: '/assets/sounds/type.mp3', type: 'audio/mpeg' }\n  ],\n  loop: true\n});\n\nplayAllElement.addEventListener('click', () => {\n  bleep?.play('A');\n  bleep?.play('B');\n  bleep?.play('C');\n});\n\nstopOneElement.addEventListener('click', () => {\n  bleep?.stop('B');\n});\n\nstopAllElement.addEventListener('click', () => {\n  bleep?.stop('A');\n  bleep?.stop('B');\n  bleep?.stop('C');\n});\n"},5945:e=>{e.exports="import { createBleepsManager } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <button class=\"click\">Click</button>\n  <button class=\"error\">Error</button>\n`;\n\nconst clickElement = rootElement.querySelector('.click') as HTMLButtonElement;\nconst errorElement = rootElement.querySelector('.error') as HTMLButtonElement;\n\ntype BleepNames = 'click' | 'error';\n\nconst bleepsManager = createBleepsManager<BleepNames>({\n  bleeps: {\n    click: {\n      sources: [\n        { src: '/assets/sounds/click.webm', type: 'audio/webm' },\n        { src: '/assets/sounds/click.mp3', type: 'audio/mpeg' }\n      ]\n    },\n    error: {\n      sources: [\n        { src: '/assets/sounds/error.webm', type: 'audio/webm' },\n        { src: '/assets/sounds/error.mp3', type: 'audio/mpeg' }\n      ]\n    }\n  }\n});\n\nclickElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.click?.play();\n});\n\nerrorElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.error?.play();\n});\n"},5958:e=>{e.exports="import { createBleepsManager } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <button class=\"click\">Click</button>\n  <button class=\"error\">Error</button>\n  <button class=\"type\">Readout</button>\n`;\n\nconst clickElement = rootElement.querySelector('.click') as HTMLButtonElement;\nconst errorElement = rootElement.querySelector('.error') as HTMLButtonElement;\nconst assembleElement = rootElement.querySelector('.type') as HTMLButtonElement;\n\ntype BleepNames = 'click' | 'error' | 'type';\n\nconst bleepsManager = createBleepsManager<BleepNames>({\n  common: {\n    volume: 0.5\n  },\n  categories: {\n    interaction: {\n      volume: 0\n    },\n    notification: {\n      volume: 0.5\n    },\n    transition: {\n      volume: 1\n    }\n  },\n  bleeps: {\n    click: {\n      category: 'interaction',\n      sources: [{ src: '/assets/sounds/click.webm', type: 'audio/webm' }]\n    },\n    error: {\n      category: 'notification',\n      sources: [{ src: '/assets/sounds/error.webm', type: 'audio/webm' }]\n    },\n    type: {\n      category: 'transition',\n      sources: [{ src: '/assets/sounds/type.webm', type: 'audio/webm' }]\n    }\n  }\n});\n\nclickElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.click?.play();\n});\n\nerrorElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.error?.play();\n});\n\nassembleElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.type?.play();\n});\n"},8611:e=>{e.exports="import { createBleepsManager } from '@arwes/bleeps';\n\nconst rootElement = document.querySelector('#root') as HTMLElement;\n\nrootElement.innerHTML = `\n  <div style=\"color:#ddd;\">\n    <div style=\"margin-bottom:20px;\">\n      <label>\n        Global Volume\n        <input\n          class=\"volume\"\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          value=\"1\"\n        />\n      </label>\n\n      <label>\n        <input class=\"disable\" type=\"checkbox\">\n        <span>Disable Bleeps</span>\n      </label>\n    </div>\n\n    <div>\n      <button class=\"click\">Click</button>\n      <button class=\"error\">Error</button>\n      <button class=\"type\">Readout</button>\n    </div>\n  </div>\n`;\n\nconst volumeElement = rootElement.querySelector('.volume') as HTMLInputElement;\nconst disableElement = rootElement.querySelector('.disable') as HTMLInputElement;\nconst clickElement = rootElement.querySelector('.click') as HTMLButtonElement;\nconst errorElement = rootElement.querySelector('.error') as HTMLButtonElement;\nconst assembleElement = rootElement.querySelector('.type') as HTMLButtonElement;\n\ntype BleepsNames = 'click' | 'error' | 'type';\n\nconst bleepsManager = createBleepsManager<BleepsNames>({\n  master: {\n    volume: 1\n  },\n  categories: {\n    interaction: {\n      volume: 0.25\n    },\n    notification: {\n      volume: 0.5\n    },\n    transition: {\n      volume: 1\n    }\n  },\n  bleeps: {\n    click: {\n      category: 'interaction',\n      sources: [{ src: '/assets/sounds/click.webm', type: 'audio/webm' }]\n    },\n    error: {\n      category: 'notification',\n      sources: [{ src: '/assets/sounds/error.webm', type: 'audio/webm' }]\n    },\n    type: {\n      category: 'transition',\n      sources: [{ src: '/assets/sounds/type.webm', type: 'audio/webm' }]\n    }\n  }\n});\n\nvolumeElement.addEventListener('change', () => {\n  const volume = volumeElement.valueAsNumber;\n  bleepsManager?.update({\n    master: { volume }\n  });\n});\n\ndisableElement.addEventListener('change', () => {\n  const disabled = disableElement.checked;\n  bleepsManager?.update({\n    common: { disabled }\n  });\n});\n\nclickElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.click?.play();\n});\n\nerrorElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.error?.play();\n});\n\nassembleElement.addEventListener('click', () => {\n  bleepsManager?.bleeps.type?.play();\n});\n"},8204:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type CSSObject, Global } from '@emotion/react';\nimport { createAppTheme } from '@arwes/theme';\nimport { createAppStylesBaseline } from '@arwes/core';\n\nconst theme = createAppTheme();\nconst stylesBaseline = createAppStylesBaseline(theme);\n\nconst Sandbox = (): ReactElement => (\n  <main style={{ padding: '2rem' }}>\n    <Global styles={stylesBaseline as Record<string, CSSObject>} />\n\n    <h1>h1. Lorem ipsum lov sit amet</h1>\n    <h2>h2. Lorem ipsum lov sit amet</h2>\n    <h3>h3. Lorem ipsum lov sit amet</h3>\n    <h4>h4. Lorem ipsum lov sit amet</h4>\n    <h5>h5. Lorem ipsum lov sit amet</h5>\n    <h6>h6. Lorem ipsum lov sit amet</h6>\n    <hr />\n    <p>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit, sed\n      do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n      nisi ut aliquip ex ea commodo consequat.\n    </p>\n    <p>\n      Lorem ipsum <b>lov sit amet, consectetur</b> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <i>lov sit amet, consectetur</i> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <u>lov sit amet, consectetur</u> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <small>lov sit amet, consectetur</small> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <sup>lov sit</sup> amet, <sub>consectetur</sub> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <a href='#'>lov sit amet, consectetur</a> adipiscing elit.\n    </p>\n\n    <ul>\n      <li>Lorem ipsum lov sit amet.</li>\n      <li>\n        Lorem ipsum lov sit amet.\n        <ul>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n        </ul>\n      </li>\n      <li>Lorem ipsum lov sit amet.</li>\n    </ul>\n\n    <ol>\n      <li>Lorem ipsum lov sit amet.</li>\n      <li>\n        Lorem ipsum lov sit amet.\n        <ol>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n        </ol>\n      </li>\n      <li>Lorem ipsum lov sit amet.</li>\n    </ol>\n\n    <p>\n      Lorem ipsum <code>lov sit amet, consectetur</code> adipiscing elit.\n    </p>\n    <pre>\n      Lorem ipsum lov sit amet.{'\\n'}\n      Lorem ipsum lov sit amet.{'\\n'}\n      Lorem ipsum lov sit amet.\n    </pre>\n\n    <blockquote>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='secondary'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='info'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='success'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='warning'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='error'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Lorem ipsum</th>\n          <th>Lov sit</th>\n          <th>Amet, consectetur</th>\n          <th>Adipiscing elit</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <figure>\n      <img src='/assets/images/background-large.jpg' />\n      <figcaption>Lorem ipsum lov sit amet.</figcaption>\n    </figure>\n  </main>\n);\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4515:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type CSSObject, Global } from '@emotion/react';\nimport { createAppTheme } from '@arwes/theme';\nimport { createAppStylesBaseline } from '@arwes/core';\n\nconst theme = createAppTheme({\n  settings: {\n    dark: false\n  }\n});\nconst stylesBaseline = createAppStylesBaseline(theme);\n\nconst Sandbox = (): ReactElement => (\n  <main style={{ padding: '2rem' }}>\n    <Global styles={stylesBaseline as Record<string, CSSObject>} />\n\n    <h1>h1. Lorem ipsum lov sit amet</h1>\n    <h2>h2. Lorem ipsum lov sit amet</h2>\n    <h3>h3. Lorem ipsum lov sit amet</h3>\n    <h4>h4. Lorem ipsum lov sit amet</h4>\n    <h5>h5. Lorem ipsum lov sit amet</h5>\n    <h6>h6. Lorem ipsum lov sit amet</h6>\n    <hr />\n    <p>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit, sed\n      do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n      nisi ut aliquip ex ea commodo consequat.\n    </p>\n    <p>\n      Lorem ipsum <b>lov sit amet, consectetur</b> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <i>lov sit amet, consectetur</i> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <u>lov sit amet, consectetur</u> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <small>lov sit amet, consectetur</small> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <sup>lov sit</sup> amet, <sub>consectetur</sub> adipiscing elit.\n    </p>\n    <p>\n      Lorem ipsum <a href='#'>lov sit amet, consectetur</a> adipiscing elit.\n    </p>\n\n    <ul>\n      <li>Lorem ipsum lov sit amet.</li>\n      <li>\n        Lorem ipsum lov sit amet.\n        <ul>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n        </ul>\n      </li>\n      <li>Lorem ipsum lov sit amet.</li>\n    </ul>\n\n    <ol>\n      <li>Lorem ipsum lov sit amet.</li>\n      <li>\n        Lorem ipsum lov sit amet.\n        <ol>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n          <li>Lorem ipsum lov sit amet.</li>\n        </ol>\n      </li>\n      <li>Lorem ipsum lov sit amet.</li>\n    </ol>\n\n    <p>\n      Lorem ipsum <code>lov sit amet, consectetur</code> adipiscing elit.\n    </p>\n    <pre>\n      Lorem ipsum lov sit amet.{'\\n'}\n      Lorem ipsum lov sit amet.{'\\n'}\n      Lorem ipsum lov sit amet.\n    </pre>\n\n    <blockquote>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='secondary'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='info'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='success'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='warning'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n    <blockquote data-arwes-global-palette='error'>\n      Lorem ipsum lov sit amet, consectetur adipiscing elit.\n    </blockquote>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Lorem ipsum</th>\n          <th>Lov sit</th>\n          <th>Amet, consectetur</th>\n          <th>Adipiscing elit</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n        <tr>\n          <td>Lorem ipsum</td>\n          <td>Lov sit</td>\n          <td>Amet, consectetur</td>\n          <td>Adipiscing elit</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <figure>\n      <img src='/assets/images/background-large.jpg' />\n      <figcaption>Lorem ipsum lov sit amet.</figcaption>\n    </figure>\n  </main>\n);\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3512:e=>{e.exports="import { createFrameKranoxClip } from '@arwes/frames';\n\nconst root = document.querySelector('#root') as HTMLDivElement;\nconst box = document.createElement('div');\n\nroot.appendChild(box);\nObject.assign(box.style, {\n  width: '200px',\n  height: '400px',\n  background: '#077',\n  clipPath: createFrameKranoxClip({ squareSize: '1rem' })\n});\n"},2013:e=>{e.exports="import { createFrameKranoxClip } from '@arwes/frames';\n\nconst root = document.querySelector('#root') as HTMLDivElement;\nconst box = document.createElement('div');\n\nroot.appendChild(box);\nObject.assign(box.style, {\n  width: '200px',\n  height: '400px',\n  background: '#077',\n  clipPath: createFrameKranoxClip({\n    padding: 4,\n    strokeWidth: 2,\n    squareSize: 12,\n    smallLineLength: 12,\n    largeLineLength: 48\n  })\n});\n"},9389:e=>{e.exports="import { createFrameOctagonClip } from '@arwes/frames';\n\nconst root = document.querySelector('#root') as HTMLDivElement;\nconst box = document.createElement('div');\n\nroot.appendChild(box);\nObject.assign(box.style, {\n  width: '200px',\n  height: '100px',\n  clipPath: createFrameOctagonClip({ squareSize: '1rem' }),\n  background: '#077'\n});\n"},8508:e=>{e.exports="import { createFrameOctagonClip } from '@arwes/frames';\n\nconst root = document.querySelector('#root') as HTMLDivElement;\nconst box = document.createElement('div');\n\nroot.appendChild(box);\nObject.assign(box.style, {\n  width: '200px',\n  height: '100px',\n  clipPath: createFrameOctagonClip({\n    leftTop: true,\n    rightTop: false,\n    rightBottom: true,\n    leftBottom: false\n  }),\n  background: '#077'\n});\n"},2756:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          initialStyle: { x: 0, backgroundColor: '#0ff' },\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: '#ff0' },\n            exiting: { x: [100, 0], backgroundColor: '#0ff' }\n          }\n        }}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8209:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={[\n          {\n            initialStyle: { x: 0 },\n            transitions: {\n              entering: { x: [0, 100] },\n              exiting: { x: [100, 0] }\n            }\n          },\n          {\n            initialStyle: { backgroundColor: '#0ff' },\n            transitions: {\n              entering: { backgroundColor: '#ff0' },\n              exiting: { backgroundColor: '#0ff' }\n            }\n          }\n        ]}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2790:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Animator disabled>\n      <Animated\n        style={{ margin: 10, width: 40, height: 40, backgroundColor: '#777' }}\n        animated={{\n          initialStyle: { x: 0, backgroundColor: '#0ff' },\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: '#ff0' },\n            exiting: { x: [100, 0], backgroundColor: '#0ff' }\n          }\n        }}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},989:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate } from 'motion';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          initialStyle: { backgroundColor: '#0ff' },\n          transitions: {\n            entering: ({ element, duration }) => animate(\n              element,\n              { x: [0, 100], backgroundColor: '#ff0' },\n              { duration }\n            ),\n            exiting: ({ element, duration }) => animate(\n              element,\n              { x: [100, 0], backgroundColor: '#0ff' },\n              { duration }\n            )\n          }\n        }}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},705:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          initialStyle: { x: 0, backgroundColor: '#0ff' },\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: '#ff0' },\n            exiting: { x: [100, 0], backgroundColor: '#0ff' }\n          }\n        }}\n        hideOnExited={false}\n        hideOnEntered={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3610:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AnimatedX } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  const [position, setPosition] = useState('a');\n\n  useEffect(() => {\n    const tid = setInterval(() => setPosition(p => {\n      switch (p) {\n        case 'a': return 'b';\n        case 'b': return 'c';\n        default: return 'a';\n      }\n    }), 1000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <AnimatedX\n      style={{ margin: 10, width: 50, height: 50, backgroundColor: '#777' }}\n      state={position}\n      animated={{\n        initialStyle: { x: 0, backgroundColor: '#0ff' },\n        transitions: {\n          a: { x: 0, backgroundColor: '#0ff' },\n          b: { x: 100, backgroundColor: '#ff0' },\n          c: { x: 200, backgroundColor: '#f0f' }\n        }\n      }}\n    />\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5141:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AnimatedX } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <AnimatedX\n      style={{ margin: 10, width: 50, height: 50, backgroundColor: '#777' }}\n      state={undefined} // No state provided.\n      animated={{\n        initialStyle: { x: 0, backgroundColor: '#0ff' },\n        transitions: {\n          a: { x: 0, backgroundColor: '#0ff' },\n          b: { x: 100, backgroundColor: '#ff0' },\n          c: { x: 200, backgroundColor: '#f0f' }\n        }\n      }}\n    />\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},1953:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AnimatedX } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  const [position, setPosition] = useState('a');\n\n  useEffect(() => {\n    const tid = setInterval(() => setPosition(p => {\n      switch (p) {\n        case 'a': return 'b';\n        case 'b': return 'c';\n        default: return 'a';\n      }\n    }), 1000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <AnimatedX\n      style={{ margin: 10, width: 50, height: 50, backgroundColor: '#777' }}\n      state={position}\n      animated={{\n        initialStyle: { x: 0, backgroundColor: '#0ff' },\n        transitions: {\n          a: { x: 0, backgroundColor: '#0ff', duration: 0.8, easing: 'ease-in-out' },\n          b: { x: 100, backgroundColor: '#ff0', options: { duration: 0.8, easing: 'ease-in-out' } },\n          c: { x: 200, backgroundColor: '#f0f' }\n        }\n      }}\n    />\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2391:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated, aa, aaOpacity } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={[\n          aa('x', 0, 100),\n          aa('backgroundColor', '#0ff', '#ff0', '#f0f'),\n          aaOpacity()\n        ]}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6704:e=>{e.exports="import React, { type ReactElement, useState, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate } from 'motion';\nimport { type AnimatorNode, type AnimatorInterface } from '@arwes/animator';\nimport { Animator, useAnimator } from '@arwes/react-animator';\n\nconst AnimatorUIListener = (): ReactElement => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const animator = useAnimator() as AnimatorInterface;\n\n  useEffect(() => {\n    let animation: { cancel: () => void } | undefined;\n\n    // A subscription function to be called every time the state changes.\n    const subscriber = (node: AnimatorNode): void => {\n      const element = elementRef.current as HTMLElement;\n      const { duration } = node; // Getting the duration once is faster.\n\n      switch (node.state) {\n        case 'entering': {\n          animation?.cancel(); // Cancel current animation.\n          animation = animate(\n            element,\n            { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            { duration: duration.enter }\n          );\n          break;\n        }\n        case 'exiting': {\n          animation?.cancel();\n          animation = animate(\n            element,\n            { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] },\n            { duration: duration.exit }\n          );\n          break;\n        }\n      }\n    };\n\n    animator.node.subscribe(subscriber);\n\n    return () => {\n      animation?.cancel();\n      animator.node.unsubscribe(subscriber);\n    };\n  }, [animator]);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{ margin: 10, width: 40, height: 40, backgroundColor: '#777' }}\n    />\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <AnimatorUIListener />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8908:e=>{e.exports="import React, { type ReactNode, type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator, type AnimatorProps } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst AnimatorUIListener = (): ReactElement => {\n  return (\n    <Animated\n      style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n      animated={{\n        transitions: {\n          entering: { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n          exiting: { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] }\n        }\n      }}\n      hideOnExited={false}\n    />\n  );\n};\n\ninterface ItemProps {\n  animator?: AnimatorProps\n  children?: ReactNode\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props.animator}>\n      <AnimatorUIListener />\n      <div style={{ marginLeft: 20 }}>\n        {props.children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Item>\n        <AnimatorUIListener />\n        <Item />\n        <Item />\n        <Item />\n      </Item>\n\n      <div style={{ height: 50 }} />\n\n      <Item animator={{ combine: true }}>\n        <AnimatorUIListener />\n        <Item />\n        <Item />\n        <Item />\n      </Item>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3972:e=>{e.exports="import React, { type ReactNode, type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type AnimatorProps, Animator, AnimatorGeneralProvider } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface ItemProps extends AnimatorProps {\n  children?: ReactNode\n}\n\nconst Item = ({ children, ...animator }: ItemProps): ReactElement => {\n  return (\n    <Animator {...animator}>\n      <Animated\n        style={{ margin: 5, width: 40, height: 15, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: {\n              x: [0, 50],\n              backgroundColor: ['#0ff', '#ff0'],\n              options: { easing: 'linear' }\n            },\n            exiting: {\n              x: [50, 0],\n              backgroundColor: ['#ff0', '#0ff'],\n              options: { easing: 'linear' }\n            }\n          }\n        }}\n        hideOnExited={false}\n      />\n      <div style={{ marginLeft: 20 }}>\n        {children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <AnimatorGeneralProvider duration={{ enter: 0.8, stagger: 0.2 }}>\n      <Item manager='sequence' combine>\n\n        <Item manager='parallel' combine>\n          {Array(5).fill(0).map((_, i) => <Item key={i} />)}\n        </Item>\n\n        <Item manager='stagger' combine>\n          {Array(5).fill(0).map((_, i) => <Item key={i} />)}\n        </Item>\n\n        <Item manager='sequence' combine>\n          {Array(5).fill(0).map((_, i) => <Item key={i} />)}\n        </Item>\n\n      </Item>\n    </AnimatorGeneralProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},314:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type AnimatorProps, Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface ItemProps extends AnimatorProps {}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props}>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n  const [enabled, setEnabled] = useState(false);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setEnabled(v => !v)}>\n          {enabled ? 'Disable' : 'Enable'}\n        </button>\n      </div>\n\n      <Animator\n        active={active}\n        combine\n        manager='stagger'\n        checkToSend={[enabled]}\n        checkToSendAction='refresh'\n      >\n        <Item />\n        <Item />\n        <Item condition={() => enabled} />\n        <Item />\n        <Item />\n      </Animator>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5144:e=>{e.exports="// An Animator disabled will not its animator interface so the components\n// expecting it to subscribe to will not be able to do so.\n// Children animators will work as root animators since they don't receive a valid\n// parent animator to subscribe to.\n// The option is useful for removing all components animations which\n// depend on the animator transitions.\n\nimport React, { type ReactNode, type ReactElement, useState, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate } from 'motion';\nimport { Animator, type AnimatorProps, useAnimator } from '@arwes/react-animator';\n\nconst AnimatorUIListener = (): ReactElement => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const animator = useAnimator();\n\n  useEffect(() => {\n    // If the Animator is disabled, it will provide an undefined value.\n    if (!animator) {\n      return;\n    }\n\n    animator.node.subscribe(node => {\n      const element = elementRef.current as HTMLElement;\n      const { duration } = node;\n\n      switch (node.state) {\n        case 'entering': {\n          animate(\n            element,\n            { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            { duration: duration.enter }\n          );\n          break;\n        }\n        case 'exiting': {\n          animate(\n            element,\n            { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] },\n            { duration: duration.exit }\n          );\n          break;\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n    />\n  );\n};\n\ninterface ItemProps {\n  animator?: AnimatorProps\n  children?: ReactNode\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props.animator}>\n      <AnimatorUIListener />\n      <div style={{ marginLeft: 20 }}>\n        {props.children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} combine>\n      <Item>\n        <Item>\n          <Item />\n          <Item />\n        </Item>\n        <Item>\n          <Item />\n          <Item />\n        </Item>\n      </Item>\n      <Item>\n        <Item animator={{ disabled: true }}>\n          <Item />\n          <Item />\n        </Item>\n        <Item>\n          <Item />\n          <Item />\n        </Item>\n      </Item>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},1994:e=>{e.exports="import React, { type ReactNode, type ReactElement, useState, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate } from 'motion';\nimport { type AnimatorInterface } from '@arwes/animator';\nimport { Animator, type AnimatorProps, useAnimator } from '@arwes/react-animator';\n\nconst AnimatorUIListener = (): ReactElement => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const animator = useAnimator() as AnimatorInterface;\n\n  useEffect(() => {\n    animator.node.subscribe(node => {\n      const element = elementRef.current as HTMLElement;\n      const { duration } = node;\n\n      switch (node.state) {\n        case 'entering': {\n          animate(\n            element,\n            { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            { duration: duration.enter }\n          );\n          break;\n        }\n        case 'exiting': {\n          animate(\n            element,\n            { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] },\n            { duration: duration.exit }\n          );\n          break;\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n    />\n  );\n};\n\ninterface ItemProps {\n  animator?: AnimatorProps\n  children?: ReactNode\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props.animator}>\n      <AnimatorUIListener />\n      <div style={{ marginLeft: 20 }}>\n        {props.children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} combine>\n      <Item>\n        <Item />\n        <Item />\n        <Item />\n        <Item />\n      </Item>\n      <Item>\n        <Item />\n        {/* The item will have its corresponding Animator dismissed, so\n        it will work with the closest parent Animator. */}\n        <Item animator={{ dismissed: true }} />\n        <Item />\n        <Item />\n      </Item>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},1866:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20 }}\n        animated={{\n          initialStyle: { backgroundColor: '#777' },\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(false);\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    const tid1 = setTimeout(() => setActive(true), 1000);\n    const tid2 = setTimeout(() => setShow(true), 1200);\n\n    return () => {\n      clearTimeout(tid1);\n      clearTimeout(tid2);\n    };\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(show ? 20 : 10).fill(0).map((_, index) => <Item key={index} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9234:e=>{e.exports="import React, { type ReactElement, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type AnimatorInterface, type AnimatorNode } from '@arwes/animator';\nimport { Animator, useAnimator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface AnimatorUIListenerProps {\n  children: number\n}\n\nconst AnimatorUIListener = (props: AnimatorUIListenerProps): ReactElement => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const animator = useAnimator() as AnimatorInterface;\n\n  useEffect(() => {\n    const element = elementRef.current as HTMLDivElement;\n\n    // Set a reference from the node to the element and viceversa.\n    element.dataset.id = animator.node.id;\n    animator.node.control.setForeignRef(element);\n  }, []);\n\n  return (\n    <Animated\n      ref={elementRef}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 'auto',\n        height: '20vh',\n        backgroundColor: '#055',\n        color: '#fff',\n        fontSize: '2rem'\n      }}\n      animated={{\n        initialStyle: { opacity: 0.2 },\n        transitions: {\n          entering: { opacity: [0.2, 1] },\n          exiting: { opacity: [1, 0.2] }\n        }\n      }}\n      hideOnExited={false}\n    >\n      {props.children}\n    </Animated>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const rootNodeRef = useRef<AnimatorNode>(null);\n\n  useEffect(() => {\n    const rootNode = rootNodeRef.current as unknown as AnimatorNode;\n    const childrenNodes = Array.from(rootNode.children);\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        const element = entry.target as HTMLDivElement;\n        const id = element.dataset.id as string;\n        const childNode = childrenNodes.find(node => id === node.id) as AnimatorNode;\n\n        // If the node element is visible, enter only that child node\n        // in the parent node manager.\n        if (entry.isIntersecting) {\n          rootNode.manager.enterChildren([childNode]);\n        }\n        // Otherwise, directly exit the child node.\n        else {\n          childNode.send('exit');\n        }\n      });\n    }, {\n      threshold: 0.99\n    });\n\n    childrenNodes.forEach(node => {\n      const element = node.control.getForeignRef() as HTMLDivElement;\n      observer.observe(element);\n    });\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(3, 1fr)',\n        gap: '1rem',\n        padding: '1rem'\n      }}\n    >\n      <Animator\n        // Parent node is not activated so the managing happens externally.\n        active={false}\n        manager='stagger'\n        nodeRef={rootNodeRef}\n      >\n        {Array(100).fill(0).map((_, index) =>\n          <Animator key={index}>\n            <AnimatorUIListener>\n              {index}\n            </AnimatorUIListener>\n          </Animator>\n        )}\n      </Animator>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8399:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} initialState='entered'>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          initialStyle: { x: 100, backgroundColor: '#ff0' },\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3471:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator duration={{ enter: 0.15 }}>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='sequence' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5664:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} manager='stagger' combine>\n      {Array(10).fill(0).map((_, i) => <Item key={i} />)}\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4437:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type AnimatorProps, Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface ItemProps extends AnimatorProps {}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props}>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n  const [firstEnabled, setFirstEnabled] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setFirstEnabled(v => !v)}>\n          {firstEnabled ? 'Enable Second' : 'Enable First'}\n        </button>\n      </div>\n\n      <Animator\n        active={active}\n        combine\n        manager='switch'\n        // Dependency list to check when to send the action.\n        checkToSend={[firstEnabled]}\n        // The action to send when the dependency list changes.\n        // \"refresh\" action checks for children nodes updates.\n        checkToSendAction='refresh'\n      >\n        <Item condition={() => firstEnabled} />\n        <Item condition={() => !firstEnabled} />\n      </Animator>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},7934:e=>{e.exports="import React, { type ReactNode, type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface ItemProps {\n  children?: ReactNode\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n      <div style={{ marginLeft: 20 }}>\n        {props.children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Item>\n        <Item />\n        <Item />\n        <Item>\n          <Item />\n          <Item />\n          <Item />\n        </Item>\n      </Item>\n      <Item>\n        <Item />\n        <Item />\n        <Item>\n          <Item />\n          <Item />\n          <Item />\n        </Item>\n      </Item>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8863:e=>{e.exports="// A child Animator as root, will create a new system of Animator nodes.\n\nimport React, { type ReactNode, type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator, type AnimatorProps } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\ninterface ItemProps {\n  animator?: AnimatorProps\n  children?: ReactNode\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  return (\n    <Animator {...props.animator}>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 50], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [50, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n        hideOnExited={false}\n      />\n      <div style={{ marginLeft: 20 }}>\n        {props.children}\n      </div>\n    </Animator>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} combine>\n      <Item>\n        <Item>\n          <Item>\n            <Item />\n            <Item />\n          </Item>\n          <Item>\n            <Item />\n            <Item />\n          </Item>\n        </Item>\n        <Item>\n          <Item animator={{ root: true, active: !active }}>\n            <Item />\n            <Item />\n          </Item>\n          <Item>\n            <Item />\n            <Item />\n          </Item>\n        </Item>\n      </Item>\n\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4164:e=>{e.exports="// This sandbox does not support dynamic list items rendering,\n// and does not provide component clean up for list items animations.\n\nimport React, { type ReactElement, useState, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate, stagger } from 'motion';\nimport { Animator, useAnimator } from '@arwes/react-animator';\nimport { Animated, aaOpacity } from '@arwes/react-animated';\n\nconst ScrollList = (): ReactElement => {\n  const listElementRef = useRef<HTMLDivElement>(null);\n  const itemsElementsRef = useRef<HTMLDivElement[]>([]);\n  const animator = useAnimator();\n\n  useEffect(() => {\n    const listElement = listElementRef.current;\n\n    if (!animator || !listElement) {\n      return;\n    }\n\n    const observer = new window.IntersectionObserver(entries => {\n      const items = [...entries]\n        .filter(entry => entry.target && entry.isIntersecting)\n        .map(entry => entry.target as HTMLDivElement)\n        .filter(target => !target.dataset.visible)\n        .sort((a, b) => Number(a.dataset.index) - Number(b.dataset.index));\n\n      if (items.length) {\n        const staggerDelay = 0.025;\n        const staggerMaxItems = 30;\n        const staggerTime = Math.min(\n          staggerDelay,\n          staggerDelay * (1 / (items.length / staggerMaxItems))\n        );\n\n        items.forEach(item => {\n          item.dataset.visible = 'true';\n        });\n\n        animate(\n          items,\n          { opacity: 1 },\n          {\n            duration: animator.node.duration.enter,\n            delay: stagger(staggerTime)\n          }\n        );\n      }\n    }, {\n      root: listElement,\n      rootMargin: '0px',\n      threshold: 0.5\n    });\n\n    const unsubscribe = animator.node.subscribe(node => {\n      switch (node.state) {\n        case 'entering': {\n          itemsElementsRef.current.forEach(element => observer.observe(element));\n          break;\n        }\n        case 'exiting': {\n          if (itemsElementsRef.current.length) {\n            itemsElementsRef.current.forEach(element => {\n              element.dataset.visible = '';\n              observer.unobserve(element);\n            });\n            animate(\n              itemsElementsRef.current,\n              { opacity: 0 },\n              { duration: node.duration.exit }\n            );\n          }\n          break;\n        }\n      }\n    });\n\n    return () => {\n      unsubscribe();\n      observer.disconnect();\n    };\n  }, [animator]);\n\n  return (\n    <Animated\n      ref={listElementRef}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)',\n        gap: '1rem',\n        overflowY: 'auto',\n        width: 300,\n        height: 300\n      }}\n      animated={aaOpacity()}\n    >\n      {Array(100).fill(null).map((_, index) => (\n        <div\n          key={index}\n          ref={ref => {\n            if (ref) {\n              itemsElementsRef.current.push(ref);\n            }\n          }}\n          data-index={index}\n          style={{\n            padding: '0.5rem',\n            color: '#fff',\n            backgroundColor: '#555',\n            opacity: animator ? 0 : undefined\n          }}\n        >\n          {index}\n        </div>\n      ))}\n    </Animated>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <ScrollList />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2438:e=>{e.exports="import React, { type ReactElement, useState, type CSSProperties, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated, aa, aaOpacity } from '@arwes/react-animated';\n\n// LINK\n\ninterface LinkProps {\n  path: string\n  bg: string\n  bgActive: string\n  active: boolean\n  onLink: (path: string) => void\n}\n\nconst Link = (props: LinkProps): ReactElement => {\n  const { path, bg, bgActive, active, onLink } = props;\n  return (\n    <div\n      style={{\n        backgroundColor: active ? bgActive : bg,\n        cursor: 'pointer',\n        transition: 'background-color 200ms ease-out'\n      }}\n      onClick={() => onLink(path)}\n    />\n  );\n};\n\n// HEADER\n\ninterface HeaderProps {\n  path: string\n  onLink: (path: string) => void\n}\n\nconst Header = (props: HeaderProps): ReactElement => {\n  const { path, onLink } = props;\n  return (\n    <Animator>\n      <Animated\n        as='header'\n        style={{\n          gridArea: 'header',\n          display: 'grid',\n          gridTemplateColumns: 'repeat(4, 1fr)',\n          gap: '1rem',\n          padding: '1rem',\n          backgroundColor: '#055'\n        }}\n        animated={[aaOpacity(), aa('y', 20, 0)]}\n        hideOnExited\n      >\n        <Link path='a' active={path === 'a'} bg='#550' bgActive='#aa0' onLink={onLink} />\n        <Link path='b' active={path === 'b'} bg='#707' bgActive='#c0c' onLink={onLink} />\n        <Link path='c' active={path === 'c'} bg='#050' bgActive='#0a0' onLink={onLink} />\n        <Link path='' active={path === ''} bg='#555' bgActive='#aaa' onLink={onLink} />\n      </Animated>\n    </Animator>\n  );\n};\n\n// FOOTER\n\nconst Footer = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        as='footer'\n        style={{ gridArea: 'footer', backgroundColor: '#055' }}\n        animated={[aaOpacity(), aa('y', -20, 0)]}\n        hideOnExited\n      />\n    </Animator>\n  );\n};\n\n// PANEL LEFT\n\nconst PanelLeft = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        as='aside'\n        style={{ gridArea: 'panelLeft', backgroundColor: '#055' }}\n        animated={[aaOpacity(), aa('x', 20, 0)]}\n        hideOnExited\n      />\n    </Animator>\n  );\n};\n\n// PANEL RIGHT\n\nconst PanelRight = (): ReactElement => {\n  return (\n    <Animator>\n      <Animated\n        as='aside'\n        style={{ gridArea: 'panelRight', backgroundColor: '#055' }}\n        animated={[aaOpacity(), aa('x', -20, 0)]}\n        hideOnExited\n      />\n    </Animator>\n  );\n};\n\n// ITEM\n\ninterface ItemProps {\n  style?: CSSProperties\n  bg: string\n}\n\nconst Item = (props: ItemProps): ReactElement => {\n  const { style, bg } = props;\n  return (\n    <Animator>\n      <Animated\n        style={{ ...style, backgroundColor: bg }}\n        animated={aaOpacity()}\n        hideOnExited\n      />\n    </Animator>\n  );\n};\n\n// SUBSYSTEMS\n\nconst SubsystemA = (): ReactElement => {\n  return (\n    <Animator manager='stagger' combine>\n      <div\n        style={{\n          display: 'grid',\n          gap: '1rem',\n          gridTemplateRows: 'repeat(5, 1fr)',\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        {Array(5).fill(0).map((_, i) => <Item key={i} bg='#550' />)}\n      </div>\n    </Animator>\n  );\n};\n\nconst SubsystemB = (): ReactElement => {\n  return (\n    <Animator manager='stagger' combine>\n      <div\n        style={{\n          display: 'grid',\n          gap: '1rem',\n          gridTemplateRows: 'repeat(5, 1fr)',\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        {Array(5).fill(0).map((_, i) => <Item key={i} bg='#707' />)}\n      </div>\n    </Animator>\n  );\n};\n\nconst SubsystemC = (): ReactElement => {\n  return (\n    <Animator manager='stagger' combine>\n      <div\n        style={{\n          display: 'grid',\n          gap: '1rem',\n          gridTemplateRows: 'repeat(5, 1fr)',\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        {Array(5).fill(0).map((_, i) => <Item key={i} bg='#050' />)}\n      </div>\n    </Animator>\n  );\n};\n\n//\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n  const [path, setPath] = useState('a');\n\n  useEffect(() => {\n    if (path === '') {\n      setActive(false);\n    }\n  }, [path]);\n\n  return (\n    <Animator\n      active={active}\n      manager='stagger'\n      combine\n      duration={{ stagger: 0.1 }}\n    >\n      <div style={{\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        padding: '1rem',\n        color: '#fff'\n      }}>\n        <div style={{\n          display: 'grid',\n          gridTemplateAreas: `\n            \"header header header\"\n            \"panelLeft main panelRight\"\n            \"footer footer footer\"\n          `,\n          gridTemplateColumns: '20% 1fr 20%',\n          gridTemplateRows: 'minmax(80px, 10%) 1fr minmax(80px, 10%)',\n          gap: '1rem',\n          width: '100%',\n          height: '100%'\n        }}>\n          <Animator combine>\n            <Header path={path} onLink={path => setPath(path)} />\n            <Footer />\n          </Animator>\n          <Animator combine>\n            <Animator\n              combine\n              manager='switch'\n              checkToSend={[path]}\n              checkToSendAction='refresh'\n            >\n              <Animator\n                combine\n                condition={() => path === 'a' || path === 'b'}\n              >\n                <PanelLeft />\n              </Animator>\n            </Animator>\n            <Animator\n              combine\n              manager='switch'\n              checkToSend={[path]}\n              checkToSendAction='refresh'\n            >\n              <Animator\n                combine\n                condition={() => path === 'a'}\n              >\n                <PanelRight />\n              </Animator>\n            </Animator>\n          </Animator>\n          <main style={{ gridArea: 'main' }}>\n            <Animator\n              combine\n              manager='switch'\n              checkToSend={[path]}\n              checkToSendAction='refresh'\n            >\n              <Animator\n                combine\n                unmountOnExited\n                condition={() => path === 'a'}\n              >\n                <SubsystemA />\n              </Animator>\n              <Animator\n                combine\n                unmountOnExited\n                condition={() => path === 'b'}\n              >\n                <SubsystemB />\n              </Animator>\n              <Animator\n                combine\n                unmountOnExited\n                condition={() => path === 'c'}\n              >\n                <SubsystemC />\n              </Animator>\n            </Animator>\n          </main>\n        </div>\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5663:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated } from '@arwes/react-animated';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} unmountOnExited unmountOnEntered>\n      <Animated\n        style={{ margin: 10, width: 40, height: 20, backgroundColor: '#777' }}\n        animated={{\n          transitions: {\n            entering: { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            exiting: { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] }\n          }\n        }}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5917:e=>{e.exports="import React, { type ReactElement, useState, useRef, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { animate } from 'motion';\nimport { type AnimatorInterface } from '@arwes/animator';\nimport {\n  type AnimatorGeneralProviderSettings,\n  AnimatorGeneralProvider,\n  Animator,\n  useAnimator\n} from '@arwes/react-animator';\n\nconst AnimatorUIListener = (): ReactElement => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const animator = useAnimator() as AnimatorInterface;\n\n  useEffect(() => {\n    animator.node.subscribers.add(node => {\n      const element = elementRef.current as HTMLElement;\n      const { duration } = node.control.getSettings();\n\n      switch (node.state) {\n        case 'entering': {\n          animate(\n            element,\n            { x: [0, 100], backgroundColor: ['#0ff', '#ff0'] },\n            { duration: duration?.enter }\n          );\n          break;\n        }\n        case 'exiting': {\n          animate(\n            element,\n            { x: [100, 0], backgroundColor: ['#ff0', '#0ff'] },\n            { duration: duration?.enter }\n          );\n          break;\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{ margin: 10, width: 40, height: 20, backgroundColor: '#0ff' }}\n    />\n  );\n};\n\nconst Item = (): ReactElement => {\n  return (\n    <Animator>\n      <AnimatorUIListener />\n    </Animator>\n  );\n};\n\nconst animatorGeneralSettings: AnimatorGeneralProviderSettings = {\n  disabled: false,\n  duration: { enter: 0.1, exit: 0.1, stagger: 0.3 }\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(v => !v), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <AnimatorGeneralProvider {...animatorGeneralSettings}>\n      <Animator active={active} manager='stagger'>\n        <Item />\n        <Item />\n        <Item />\n        <Item />\n        <Item />\n      </Animator>\n    </AnimatorGeneralProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3138:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Dots } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator active={active} duration={{ enter: 2, exit: 2 }}>\n      <div style={{\n        position: 'relative',\n        width: '80vw',\n        height: '80vh'\n      }}>\n        {/* Canvas element will ocupy the positioned parent element. */}\n        <Dots\n          color='hsla(180, 100%, 75%, 0.4)'\n        />\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4968:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Dots } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 1200);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator active={active} duration={{ enter: 0.75, exit: 0.75 }}>\n      <Dots\n        color='hsla(120, 100%, 75%, 0.1)'\n        distance={50}\n        size={45}\n        origin='top'\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5121:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Dots } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 1200);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator active={active} duration={{ enter: 1, exit: 1 }}>\n      <Dots\n        color='hsla(60, 100%, 75%, 0.25)'\n        type='circle'\n        distance={20}\n        size={2}\n        // x=0% y=100% or left-bottom corner.\n        origin={[0, 1]}\n        originInverted\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4945:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { GridLines } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator active={active} duration={{ enter: 0.5, exit: 0.5 }}>\n      <div style={{\n        position: 'relative',\n        width: '80vw',\n        height: '80vh'\n      }}>\n        {/* Canvas element will ocupy the positioned parent element. */}\n        <GridLines\n          lineColor='hsla(180, 100%, 75%, 0.5)'\n        />\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},1281:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { GridLines } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Animator duration={{ enter: 0.5, exit: 0.5 }}>\n      <GridLines\n        lineColor='hsla(180, 100%, 75%, 0.2)'\n        lineWidth={2}\n        distance={40}\n        horizontalLineDash={[4]}\n        verticalLineDash={[4]}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6536:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { MovingLines } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator\n      active={active}\n      duration={{\n        // Duration of an individual animation sequence.\n        interval: 4\n      }}\n    >\n      <div style={{\n        position: 'relative',\n        width: '80vw',\n        height: '80vh'\n      }}>\n        {/* Canvas element will ocupy the positioned parent element. */}\n        <MovingLines\n          lineColor='hsla(180, 100%, 75%, 0.5)'\n        />\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9064:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { GridLines, Dots, MovingLines } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Animator duration={{ interval: 10 }}>\n      <div style={{\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        backgroundColor: '#000906',\n        backgroundImage: 'radial-gradient(85% 85% at 50% 50%, hsla(185, 100%, 25%, 0.25) 0%, hsla(185, 100%, 25%, 0.12) 50%, hsla(185, 100%, 25%, 0) 100%)'\n      }}>\n        <GridLines\n          lineColor='hsla(180, 100%, 75%, 0.05)'\n          distance={30}\n        />\n        <Dots\n          color='hsla(180, 100%, 75%, 0.05)'\n          distance={30}\n        />\n        <MovingLines\n          lineColor='hsla(180, 100%, 75%, 0.07)'\n          distance={30}\n          sets={20}\n        />\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8139:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Puffs } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const iid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(iid);\n  }, []);\n\n  return (\n    <Animator\n      active={active}\n      duration={{\n        // The duration of an individual animation sequence.\n        interval: 2\n      }}\n    >\n      <div style={{\n        position: 'relative',\n        width: '80vw',\n        height: '80vh'\n      }}>\n        {/* Canvas element will ocupy the positioned parent element. */}\n        <Puffs\n          color='hsla(180, 100%, 75%, 0.5)'\n          quantity={20}\n        />\n      </div>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5541:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Puffs } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Animator\n      duration={{\n        enter: 0.5,\n        exit: 0.5,\n        interval: 1.5,\n        // Duration between one interval animation and the next.\n        intervalPause: 1\n      }}\n    >\n      <Puffs\n        color='hsla(60, 100%, 75%, 0.5)'\n        quantity={100}\n        padding={0}\n        // Move to the right.\n        xOffset={[10, 50]}\n        // Move to the top.\n        yOffset={[-20, -80]}\n        // Change of puff radius.\n        radiusOffset={[4, 20]}\n        // 1 set per interval animation.\n        sets={1}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2965:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Puffs } from '@arwes/react-bgs';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Animator duration={{ enter: 0.5, exit: 0.5, interval: 3 }}>\n      <Puffs\n        color='hsla(120, 100%, 75%, 0.5)'\n        quantity={1000}\n        padding={20}\n        xOffset={[50, -100]}\n        yOffset={[50, -100]}\n        radiusOffset={[4, 0]}\n      />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5095:e=>{e.exports="import React, { type ReactNode, type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type BleepsProviderSettings, BleepsProvider, useBleeps } from '@arwes/react-bleeps';\n\ntype BleepsNames = 'click' | 'intro';\n\ninterface ButtonProps {\n  name: BleepsNames\n  children: ReactNode\n}\n\nconst Button = (props: ButtonProps): ReactElement => {\n  const { name, children } = props;\n  const bleeps = useBleeps<BleepsNames>();\n  const onClick = (): void => bleeps[name]?.play();\n  return <button onClick={onClick}>{children}</button>;\n};\n\nconst bleepsSettings: BleepsProviderSettings<BleepsNames> = {\n  master: {\n    volume: 0.75\n  },\n  bleeps: {\n    click: {\n      sources: [{ src: '/assets/sounds/click.mp3', type: 'audio/mpeg' }]\n    },\n    intro: {\n      sources: [{ src: '/assets/sounds/intro.mp3', type: 'audio/mpeg' }]\n    }\n  }\n};\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <BleepsProvider {...bleepsSettings}>\n      <Button name='click'>Click!</Button>\n      {' '}\n      <Button name='intro'>Intro!</Button>\n    </BleepsProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8031:e=>{e.exports="import type { ReactElement } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Animated, aa } from '@arwes/react-animated';\nimport type { BleepsManagerProps } from '@arwes/bleeps';\nimport { BleepsProvider } from '@arwes/react-bleeps';\nimport { BleepsOnAnimator } from '@arwes/react-core';\n\ntype BleepsNames = 'click' | 'assemble';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  const [settings] = useState<BleepsManagerProps<BleepsNames>>({\n    master: {\n      volume: 0.75\n    },\n    bleeps: {\n      click: {\n        sources: [{ src: '/assets/sounds/click.mp3', type: 'audio/mpeg' }]\n      },\n      assemble: {\n        sources: [{ src: '/assets/sounds/assemble.mp3', type: 'audio/mpeg' }],\n        loop: true\n      }\n    }\n  });\n\n  return (\n    <BleepsProvider {...settings}>\n      <Animator active={active}>\n        <Animated\n          style={{ margin: 10, width: 40, height: 40 }}\n          animated={[aa('x', 0, 100), aa('background', '#0ff', '#ff0')]}\n        />\n        <BleepsOnAnimator<BleepsNames>\n          transitions={{\n            entering: 'click',\n            exiting: 'assemble'\n          }}\n        />\n      </Animator>\n    </BleepsProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},7570:e=>{e.exports="import React, { type ReactElement, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type FrameSVGPathGeneric } from '@arwes/frames';\nimport { FrameSVG } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  const paths: FrameSVGPathGeneric[] = useMemo(() => [\n    // Background shape.\n    {\n      name: 'bg',\n      style: {\n        strokeWidth: 0,\n        fill: 'hsl(180, 75%, 10%)',\n        filter: 'drop-shadow(0 0 2px hsl(180, 75%, 10%))'\n      },\n      path: [\n        ['M', 20, 20],\n        ['L', 20, '100% - 20'],\n        ['L', '100% - 20', '100% - 20'],\n        ['L', '100% - 20', 20]\n      ]\n    },\n    // Top decoration.\n    {\n      name: 'line',\n      style: {\n        strokeWidth: '1',\n        stroke: 'hsl(180, 75%, 50%)',\n        fill: 'none',\n        filter: 'drop-shadow(0 0 2px hsl(180, 75%, 50%))'\n      },\n      path: [\n        ['M', 10, 10],\n        ['L', '100% - 10', 10],\n        ['L', '100% - 10', 40]\n      ]\n    },\n    // Bottom decoration.\n    {\n      name: 'line',\n      style: {\n        strokeWidth: '2',\n        stroke: 'hsl(180, 75%, 50%)',\n        fill: 'none',\n        filter: 'drop-shadow(0 0 2px hsl(180, 75%, 50%))'\n      },\n      path: [\n        ['M', '100% - 10', '100% - 10'],\n        ['L', 10, '100% - 10'],\n        ['L', 10, '100% - 40']\n      ]\n    }\n  ], []);\n\n  return (\n    <div style={{ position: 'absolute', inset: 20 }}>\n      <FrameSVG paths={paths} />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9877:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGCorners, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 150,\n\n      '[data-name=bg]': {\n        color: 'hsl(180, 75%, 10%)'\n      },\n      '[data-name=line]': {\n        color: 'hsl(180, 75%, 50%)'\n      }\n    }}>\n      <FrameSVGCorners\n        elementRef={svgRef}\n        onRender={onRender}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},133:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGCorners } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGCorners\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5109:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGCorners } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGCorners\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(60, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(60, 75%, 50%)'\n          }\n        }}\n        cornerLength={32}\n        strokeWidth={2}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2330:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGKranox, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 500,\n\n      '[data-name=bg]': {\n        color: 'hsl(60, 75%, 10%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 10%))'\n      },\n      '[data-name=line]': {\n        color: 'hsl(60, 75%, 50%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 50%))'\n      }\n    }}>\n      <FrameSVGKranox\n        elementRef={svgRef}\n        onRender={onRender}\n        padding={4}\n        strokeWidth={2}\n        squareSize={12}\n        smallLineLength={12}\n        largeLineLength={48}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},7918:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGKranox } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGKranox\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3539:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGLines, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 150,\n\n      '[data-name=bg]': {\n        color: 'hsl(180, 75%, 10%)'\n      },\n      '[data-name=line]': {\n        color: 'hsl(180, 75%, 50%)'\n      }\n    }}>\n      <FrameSVGLines\n        elementRef={svgRef}\n        onRender={onRender}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2395:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGLines } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGLines\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6441:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGLines } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGLines\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(60, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(60, 75%, 50%)'\n          }\n        }}\n        largeLineWidth={2}\n        smallLineWidth={2}\n        smallLineLength={32}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6270:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGNefrex, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 150,\n\n      '[data-name=bg]': {\n        color: 'hsl(60, 75%, 10%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 10%))'\n      },\n      '[data-name=line]': {\n        color: 'hsl(60, 75%, 50%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 50%))'\n      }\n    }}>\n      <FrameSVGNefrex\n        elementRef={svgRef}\n        onRender={onRender}\n        padding={4}\n        strokeWidth={2}\n        squareSize={32}\n        smallLineLength={32}\n        largeLineLength={128}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8005:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGNefrex } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGNefrex\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2083:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGOctagon, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 150,\n\n      '[data-name=bg]': {\n        color: 'hsl(60, 75%, 10%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 10%))'\n      },\n      '[data-name=line]': {\n        color: 'hsl(60, 75%, 50%)',\n        filter: 'drop-shadow(0 0 4px hsl(60, 75%, 50%))'\n      }\n    }}>\n      <FrameSVGOctagon\n        elementRef={svgRef}\n        onRender={onRender}\n        padding={4}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8951:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGOctagon } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGOctagon\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2637:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGOctagon } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 150,\n      height: 300\n    }}>\n      <FrameSVGOctagon\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(120, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(120, 75%, 50%)'\n          }\n        }}\n        leftTop={false}\n        rightTop={true}\n        rightBottom={true}\n        leftBottom={false}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8297:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement, useRef, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { FrameSVGUnderline, useFrameSVGAssemblingAnimation } from '@arwes/react-frames';\n\nconst Frame = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const { onRender } = useFrameSVGAssemblingAnimation(svgRef);\n\n  return (\n    <div css={{\n      position: 'relative',\n      width: 300,\n      height: 150,\n\n      '[data-name=bg]': {\n        color: 'hsl(180, 75%, 10%)'\n      },\n      '[data-name=line]': {\n        color: 'hsl(180, 75%, 50%)'\n      }\n    }}>\n      <FrameSVGUnderline\n        elementRef={svgRef}\n        onRender={onRender}\n      />\n    </div>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Frame />\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2108:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGUnderline } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGUnderline\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(180, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(180, 75%, 50%)'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5296:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FrameSVGUnderline } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div style={{\n      position: 'relative',\n      width: 300,\n      height: 300\n    }}>\n      <FrameSVGUnderline\n        css={{\n          '[data-name=bg]': {\n            color: 'hsl(60, 75%, 10%)'\n          },\n          '[data-name=line]': {\n            color: 'hsl(60, 75%, 50%)'\n          }\n        }}\n        squareSize={32}\n        strokeWidth={3}\n      />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},234:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createFrameOctagonClip } from '@arwes/frames';\nimport { Illuminator } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div>\n      <p style={{ color: '#fff' }}>Move mouse over the page.</p>\n      <div\n        style={{\n          width: 300,\n          height: 300,\n          clipPath: createFrameOctagonClip({ squareSize: 50 })\n        }}\n      >\n        <Illuminator\n          color='hsl(180 50% 50% / 20%)'\n          size={300}\n        />\n      </div>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9420:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { IlluminatorSVG } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div>\n      <p style={{ color: '#fff' }}>Move mouse over the page.</p>\n      <svg\n        style={{\n          display: 'block',\n          width: 300,\n          height: 300\n        }}\n        xmlns='http://www.w3.org/2000/svg'\n        preserveAspectRatio='none'\n        viewBox='0 0 300 300'\n      >\n        <IlluminatorSVG\n          color='hsl(180 50% 50% / 20%)'\n          size={300}\n        />\n      </svg>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6222:e=>{e.exports="import React, { type ReactElement, useRef, useCallback } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { renderFrameSVGPaths } from '@arwes/frames';\nimport { useFrameSVGRenderer } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const onSVGRender = useCallback((svg: SVGSVGElement, width: number, height: number) => {\n    renderFrameSVGPaths(svg, width, height, [\n      {\n        style: {\n          fill: 'hsl(180, 50%, 10%)'\n        },\n        path: [\n          ['M', 0, 0],\n          ['L', '100%', 0],\n          ['L', '50%', '100%'],\n          'Z'\n        ]\n      }\n    ]);\n  }, []);\n\n  useFrameSVGRenderer(svgRef, onSVGRender);\n\n  return (\n    <svg\n      ref={svgRef}\n      xmlns='http://www.w3.org/2000/svg'\n      preserveAspectRatio='none'\n      style={{\n        display: 'block',\n        width: 300,\n        height: 300\n      }}\n    />\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9496:e=>{e.exports="import React, { type ReactElement, useRef, useCallback } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { renderFrameSVGPaths } from '@arwes/frames';\nimport { useFrameSVGRenderer } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  const clipPathId = 'clipPathId';\n  const contentId = 'contentId';\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const onSVGRender = useCallback((svg: SVGSVGElement, width: number, height: number) => {\n    const clipPathElement = svg.querySelector(`#${clipPathId}`) as SVGElement;\n    const contentElement = svg.querySelector(`#${contentId}`) as SVGElement;\n\n    // Render tetragon shape element to clip content.\n    renderFrameSVGPaths(clipPathElement, width, height, [\n      [\n        ['M', 20, 20],\n        ['L', 20, '100% - 20'],\n        ['L', '100% - 20', '50% + 100'],\n        ['L', '100% - 20', '50% - 100'],\n        'Z'\n      ]\n    ]);\n    // The actual rendered clipped elements.\n    renderFrameSVGPaths(contentElement, width, height, [\n      {\n        style: {\n          fill: 'hsla(180, 50%, 10%)'\n        },\n        path: [\n          ['M', 0, 0],\n          ['L', '100%', 0],\n          ['L', '100%', '100%'],\n          ['L', 0, '100%'],\n          'Z'\n        ]\n      }\n    ]);\n  }, []);\n\n  useFrameSVGRenderer(svgRef, onSVGRender);\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: '100%',\n        height: 500,\n        overflow: 'hidden'\n      }}\n    >\n      <svg\n        ref={svgRef}\n        xmlns='http://www.w3.org/2000/svg'\n        preserveAspectRatio='none'\n        style={{\n          display: 'block',\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        <defs>\n          <clipPath id={clipPathId} />\n        </defs>\n        <g\n          id={contentId}\n          style={{ clipPath: `url(#${clipPathId})` }}\n        />\n      </svg>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4213:e=>{e.exports="import React, { type ReactElement, useRef, useCallback } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { renderFrameSVGPaths } from '@arwes/frames';\nimport { useFrameSVGRenderer } from '@arwes/react-frames';\n\nconst Sandbox = (): ReactElement => {\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const onSVGRender = useCallback((svg: SVGSVGElement, width: number, height: number) => {\n    renderFrameSVGPaths(svg, width, height, [\n      {\n        style: {\n          strokeWidth: '2',\n          stroke: 'hsl(0, 75%, 50%)',\n          fill: 'hsl(0, 75%, 10%)',\n          filter: 'drop-shadow(0 0 2px hsl(0, 75%, 50%))'\n        },\n        path: [\n          ['M', 10, 30],\n          ['A', 20, 20, 0, 0, 1, 50, 30],\n          ['A', 20, 20, 0, 0, 1, 90, 30],\n          ['Q', 90, 60, 50, 90],\n          ['Q', 10, 60, 10, 30],\n          'z'\n        ]\n      }\n    ]);\n  }, []);\n\n  useFrameSVGRenderer(svgRef, onSVGRender);\n\n  return (\n    <svg\n      ref={svgRef}\n      xmlns='http://www.w3.org/2000/svg'\n      preserveAspectRatio='none'\n      style={{\n        display: 'block',\n        width: 100,\n        height: 100\n      }}\n    />\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},617:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { type ReactNode, type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type Styles, type StylesCreator, useStyles } from '@arwes/react-styles';\n\ninterface CardProps {\n  styles?: StylesCreator\n  title: string\n  children: ReactNode\n}\n\nconst createCardBaseStyles: StylesCreator = () => ({\n  root: {\n    display: 'block',\n    margin: 20,\n    padding: 20,\n    fontFamily: 'monospace',\n    color: '#0ff',\n    backgroundColor: '#333'\n  },\n  title: {\n    margin: '0 0 20px'\n  },\n  description: {\n    margin: 0\n  }\n});\n\nconst Card = (props: CardProps): ReactElement => {\n  const { styles: customStyles, title, children } = props;\n\n  const styles = useStyles([createCardBaseStyles, customStyles], undefined, []);\n\n  return (\n    <article css={styles.root}>\n      <h1 css={styles.title}>{title}</h1>\n      <p css={styles.description}>{children}</p>\n    </article>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const cardCustomStyles: Styles = {\n    root: {\n      fontFamily: 'sans-serif',\n      color: '#ff0'\n    },\n    title: {\n      textShadow: '0 0 2px #ff0'\n    }\n  };\n\n  return (\n    <Fragment>\n      <Card title='useStyles'>\n        default styles\n      </Card>\n      <Card title='useStyles' styles={cardCustomStyles}>\n        custom styles\n      </Card>\n      <Card title='useStyles' styles={false}>\n        removed styles\n      </Card>\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},6574:e=>{e.exports="/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { type ReactNode, type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type Styles, type StylesCreator, useStyles } from '@arwes/react-styles';\n\ninterface CardProps {\n  styles?: StylesCreator<CardProps>\n  disabled?: boolean\n  title: string\n  children: ReactNode\n}\n\nconst createCardBaseStyles: StylesCreator<CardProps> = props => ({\n  root: {\n    display: 'block',\n    margin: 20,\n    padding: 20,\n    fontFamily: 'monospace',\n    color: '#0ff',\n    backgroundColor: '#333',\n    opacity: props.disabled ? 0.5 : undefined\n  },\n  title: {\n    margin: '0 0 20px'\n  },\n  description: {\n    margin: 0\n  }\n});\n\nconst Card = (props: CardProps): ReactElement => {\n  const { styles: customStyles, disabled, title, children } = props;\n\n  const styles = useStyles(\n    [createCardBaseStyles, customStyles],\n    props,\n    [disabled]\n  );\n\n  return (\n    <article css={styles.root}>\n      <h1 css={styles.title}>\n        {title} {disabled ? ' (Disabled)' : ''}\n      </h1>\n      <p css={styles.description}>\n        {children}\n      </p>\n    </article>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const customPlainStyles: Styles = {\n    root: {\n      fontFamily: 'sans-serif',\n      color: '#ff0'\n    },\n    title: {\n      textShadow: '0 0 2px #ff0'\n    }\n  };\n\n  const customFunctionStyles: StylesCreator<CardProps> = () => ({\n    root: {\n      color: '#333',\n      backgroundColor: '#0ff'\n    },\n    title: {\n      textShadow: '0 0 2px #333'\n    }\n  });\n\n  return (\n    <Fragment>\n      <Card title='useStyles'>\n        default styles\n      </Card>\n      <Card title='useStyles' styles={customPlainStyles}>\n        custom plain styles\n      </Card>\n      <Card title='useStyles' styles={customFunctionStyles}>\n        custom function styles\n      </Card>\n      <Card title='useStyles' disabled>\n        props customization\n      </Card>\n      <Card title='useStyles' styles={false}>\n        removed styles\n      </Card>\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3052:e=>{e.exports="/** @jsx jsx */\nimport { jsx, ThemeProvider } from '@emotion/react';\nimport React, { type ReactNode, type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type Styles, type StylesThemeCreator, useThemeStyles } from '@arwes/react-styles';\n\n// useThemeStyles uses the `useTheme` hook which returns a `Theme`.\n// So the proper type should be set globally.\ndeclare module '@emotion/react' {\n  export interface Theme extends AppTheme {}\n}\n\ninterface AppTheme {\n  space: string\n  fontFamily: string\n  color: string\n  backgroundColor: string\n}\n\ninterface CardProps {\n  styles?: StylesThemeCreator\n  title: string\n  children: ReactNode\n}\n\nconst cardBaseStyles: StylesThemeCreator = theme => ({\n  root: {\n    display: 'block',\n    margin: theme.space,\n    padding: theme.space,\n    fontFamily: theme.fontFamily,\n    color: theme.color,\n    backgroundColor: theme.backgroundColor\n  },\n  title: {\n    margin: `0 0 ${theme.space}`\n  },\n  description: {\n    margin: 0\n  }\n});\n\nconst Card = (props: CardProps): ReactElement => {\n  const { styles: customStyles, title, children } = props;\n\n  const styles = useThemeStyles([cardBaseStyles, customStyles], undefined, []);\n\n  return (\n    <article css={styles.root}>\n      <h1 css={styles.title}>{title}</h1>\n      <p css={styles.description}>{children}</p>\n    </article>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const appTheme: AppTheme = {\n    space: '20px',\n    fontFamily: 'monospace',\n    color: '#0ff',\n    backgroundColor: '#333'\n  };\n\n  const customPlainStyles: Styles = {\n    root: {\n      fontFamily: 'sans-serif',\n      color: '#ff0'\n    },\n    title: {\n      textShadow: '0 0 2px #ff0'\n    }\n  };\n\n  const customThemeStyles: StylesThemeCreator = theme => ({\n    root: {\n      color: theme.backgroundColor,\n      backgroundColor: theme.color\n    },\n    title: {\n      textShadow: `0 0 2px ${theme.backgroundColor}`\n    }\n  });\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Card title='useThemeStyles'>\n        default styles\n      </Card>\n      <Card title='useThemeStyles' styles={customPlainStyles}>\n        custom plain styles\n      </Card>\n      <Card title='useThemeStyles' styles={customThemeStyles}>\n        custom theme styles\n      </Card>\n      <Card title='useThemeStyles' styles={false}>\n        removed styles\n      </Card>\n    </ThemeProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3497:e=>{e.exports="/** @jsx jsx */\nimport { jsx, ThemeProvider } from '@emotion/react';\nimport React, { type ReactNode, type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { type Styles, type StylesThemeCreator, useThemeStyles } from '@arwes/react-styles';\n\n// useThemeStyles uses the `useTheme` hook which returns a `Theme`.\n// So the proper type should be set globally.\ndeclare module '@emotion/react' {\n  export interface Theme extends AppTheme {}\n}\n\ninterface AppTheme {\n  space: string\n  fontFamily: string\n  color: string\n  backgroundColor: string\n}\n\ninterface CardProps {\n  styles?: StylesThemeCreator<CardProps>\n  disabled?: boolean\n  title: string\n  children: ReactNode\n}\n\nconst createCardBaseStyles: StylesThemeCreator<CardProps> = (theme, props) => ({\n  root: {\n    display: 'block',\n    margin: theme.space,\n    padding: theme.space,\n    fontFamily: theme.fontFamily,\n    color: theme.color,\n    backgroundColor: theme.backgroundColor,\n    opacity: props.disabled ? 0.5 : undefined\n  },\n  title: {\n    margin: `0 0 ${theme.space}`\n  },\n  description: {\n    margin: 0\n  }\n});\n\nconst Card = (props: CardProps): ReactElement => {\n  const { styles: customStyles, disabled, title, children } = props;\n\n  const styles = useThemeStyles<CardProps>(\n    [createCardBaseStyles, customStyles],\n    // Custom properties needed to create the styles.\n    props,\n    // Dependencies to check to recreate the styles.\n    // It should not be the `props` object for performance reasons.\n    [disabled]\n  );\n\n  return (\n    <article css={styles.root}>\n      <h1 css={styles.title}>\n        {title} {disabled ? ' (Disabled)' : ''}\n      </h1>\n      <p css={styles.description}>\n        {children}\n      </p>\n    </article>\n  );\n};\n\nconst Sandbox = (): ReactElement => {\n  const appTheme: AppTheme = {\n    space: '20px',\n    fontFamily: 'monospace',\n    color: '#0ff',\n    backgroundColor: '#333'\n  };\n\n  const customPlainStyles: Styles = {\n    root: {\n      fontFamily: 'sans-serif',\n      color: '#ff0'\n    },\n    title: {\n      textShadow: '0 0 2px #ff0'\n    }\n  };\n\n  const customThemeStyles: StylesThemeCreator<CardProps> = theme => ({\n    root: {\n      color: theme.backgroundColor,\n      backgroundColor: theme.color\n    },\n    title: {\n      textShadow: `0 0 2px ${theme.backgroundColor}`\n    }\n  });\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Card title='useThemeStyles'>\n        default styles\n      </Card>\n      <Card title='useThemeStyles' styles={customPlainStyles}>\n        custom plain styles\n      </Card>\n      <Card title='useThemeStyles' styles={customThemeStyles}>\n        custom theme styles\n      </Card>\n      <Card title='useThemeStyles' disabled>\n        props customization\n      </Card>\n      <Card title='useThemeStyles' styles={false}>\n        removed styles\n      </Card>\n    </ThemeProvider>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},7524:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Text } from '@arwes/react-text';\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Text style={{ color: '#ddd' }}>\n      Nemo enim ipsam <b>voluptatem quia voluptas</b> sit aspernatur\n      aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n      voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia\n      dolor sit amet, consectetur, <b>adipisci velit, <i>sed quia non</i></b>\n      numquam eius modi tempora incidunt ut labore et dolore magnam\n      <span><a href='#'>aliquam quaerat</a></span> voluptatem. Ut enim ad minima\n      veniam, qui nostrum exercitationem ullam corporis suscipit.\n    </Text>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3597:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Text } from '@arwes/react-text';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active}>\n      <Text as='p' style={{ color: '#ddd' }}>\n        Nemo enim ipsam <b>voluptatem quia voluptas</b> sit aspernatur\n        aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n        voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia\n        dolor sit amet, consectetur, <b>adipisci velit, <i>sed quia non</i></b>\n        numquam eius modi tempora incidunt ut labore et dolore magnam\n        <span><a href='#'>aliquam quaerat</a></span> voluptatem. Ut enim ad minima\n        veniam, qui nostrum exercitationem ullam corporis suscipit.\n      </Text>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9645:e=>{e.exports="// The animation process is intercepted and reversed, since\n// the animator is activated/deactivated before the animation\n// is completed.\n\nimport React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Text } from '@arwes/react-text';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setActive(!active), 750);\n    return () => clearTimeout(timeout);\n  }, [active]);\n\n  return (\n    <Animator active={active} duration={{ enter: 1, exit: 1 }}>\n      <Text style={{ color: '#ddd' }} fixed>\n        Nemo enim ipsam <b>voluptatem quia voluptas</b> sit aspernatur\n        aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n        voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia\n        dolor sit amet, consectetur, <b>adipisci velit, <i>sed quia non</i></b>\n        numquam eius modi tempora incidunt ut labore et dolore magnam\n        <span><a href='#'>aliquam quaerat</a></span> voluptatem. Ut enim ad minima\n        veniam, qui nostrum exercitationem ullam corporis suscipit.\n      </Text>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5039:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Text } from '@arwes/react-text';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 2000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <Animator active={active} duration={{ enter: 1.5, exit: 1.5 }}>\n      <Text\n        style={{ color: '#ddd', fontFamily: 'monospace' }}\n        manager='decipher'\n        easing='outSine'\n        fixed\n      >\n        Nemo enim ipsam <b>voluptatem quia voluptas</b> sit aspernatur\n        aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n        voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia\n        dolor sit amet, consectetur, <b>adipisci velit, <i>sed quia non</i></b>\n        numquam eius modi tempora incidunt ut labore et dolore magnam\n        <span><a href='#'>aliquam quaerat</a></span> voluptatem. Ut enim ad minima\n        veniam, qui nostrum exercitationem ullam corporis suscipit.\n      </Text>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9711:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Text } from '@arwes/react-text';\n\nconst Sandbox = (): ReactElement => {\n  const [active, setActive] = useState(true);\n\n  useEffect(() => {\n    const tid = setInterval(() => setActive(active => !active), 3000);\n    return () => clearInterval(tid);\n  }, []);\n\n  return (\n    <div style={{ color: '#ddd' }}>\n      <Animator active={active} combine manager='sequence'>\n        <Animator>\n          <Text>\n            Numquam eius modi tempora incidunt ut labore et dolore magnam aliquam\n            quaerat voluptatem. Ut enim ad minima veniam, qui nostrum.\n          </Text>\n        </Animator>\n        <Animator>\n          <Text>\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n            sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n            Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,\n            adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et\n            dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, qui\n            nostrum exercitationem ullam corporis suscipit.\n          </Text>\n        </Animator>\n        <Animator>\n          <Text>\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n            sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n            Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,\n            adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et\n            dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, qui\n            nostrum exercitationem ullam corporis suscipit.\n            Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,\n            adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et\n            dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, qui.\n          </Text>\n        </Animator>\n      </Animator>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},5170:e=>{e.exports="import React, { type ReactElement, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Animator } from '@arwes/react-animator';\nimport { Text } from '@arwes/react-text';\n\nconst childrenList = [\n  '1) Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n  '2) Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',\n  '3) Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n];\n\nconst Sandbox = (): ReactElement => {\n  const [childrenIndex, setChildrenIndex] = useState(0);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      const isLastIndex = childrenIndex === childrenList.length - 1;\n      const nextIndex = isLastIndex ? 0 : childrenIndex + 1;\n      setChildrenIndex(nextIndex);\n    }, 2000);\n    return () => clearTimeout(timeout);\n  }, [childrenIndex]);\n\n  return (\n    <Animator>\n      <Text style={{ color: '#ddd' }}>\n        {childrenList[childrenIndex]}\n      </Text>\n    </Animator>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9524:e=>{e.exports="import React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport { type AppTheme, createAppTheme } from '@arwes/theme';\n\nconst t: AppTheme = createAppTheme({\n  settings: {\n    hues: {\n      primary: 200,\n      secondary: 80\n    },\n    fontFamilies: {\n      title: 'Copperplate, Copper, \"Comic Sans\"',\n      body: 'Tahoma, Techno, Trebuchet'\n    }\n  }\n});\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global styles={{\n        html: {\n          margin: t.space(2),\n          lineHeight: 1.6,\n          backgroundColor: t.colors.primary.ol(1)\n        },\n        h1: {\n          ...t.typography.title(0),\n          margin: t.space([0, 0, 4]),\n          color: t.colors.primary.text(4),\n          background: `-webkit-linear-gradient(\n            0deg,\n            ${t.colors.primary.main(4)},\n            ${t.colors.secondary.main(4)}\n          )`,\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent'\n        },\n        hr: {\n          margin: t.space([0, 0, 4]),\n          border: 'none',\n          height: 2,\n          background: `linear-gradient(\n            90deg,\n            ${t.colors.primary.deco(5)},\n            ${t.colors.secondary.deco(10)}\n          )`\n        },\n        p: {\n          margin: t.space([0, 0, 4]),\n          ...t.typography.body(1),\n          color: t.colors.primary.text(4)\n        },\n        img: {\n          margin: 0,\n          maxWidth: '100%',\n          borderRadius: t.space(2)\n        }\n      }} />\n\n      <main style={{\n        border: `1px solid ${t.colors.primary.deco(5)}`,\n        padding: t.space([4, 8]),\n        maxWidth: 400,\n        borderRadius: t.space(4),\n        background: `linear-gradient(\n          to bottom right,\n          ${t.colors.primary.ol(2)},\n          ${t.colors.primary.ol(4)}\n        )`\n      }}>\n        <h1>Arwes Framework</h1>\n        <hr />\n        <p>\n          Arwes is a web framework to build user interfaces based on futuristic\n          science fiction designs, animations, and sound effects. The concepts\n          behind are opinionated with influences from Cyberprep and Synthwave,\n          and productions like Star Citizen, Halo, and TRON: Legacy. It tries to\n          inspire advanced science and technology.\n        </p>\n        <img src=\"/assets/images/background-large.jpg\" />\n      </main>\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},2529:e=>{e.exports="import React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport { type AppTheme, createAppTheme } from '@arwes/theme';\n\nconst t: AppTheme = createAppTheme();\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global styles={{\n        html: {\n          margin: '0.5rem',\n          lineHeight: 1.5,\n          color: '#ddd',\n          backgroundColor: '#111'\n        },\n        'h1, h2, h3': {\n          margin: 0\n        }\n      }} />\n\n      <h1><code>colors</code></h1>\n\n      {(Object.keys(t.colors) as unknown as Array<keyof AppTheme['colors']>).map(colorName => (\n        <div key={colorName}>\n          <h2><code>{colorName}</code></h2>\n\n          {(Object.keys(t.colors[colorName]) as unknown as Array<keyof AppTheme['colors'][typeof colorName]>).map(variant => (\n            <div key={variant}>\n              <h3>{variant}</h3>\n              <div style={{\n                display: 'flex',\n                flexDirection: 'row'\n              }}>\n                {Array(10).fill(null).map((_, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      flex: 1,\n                      height: 40,\n                      backgroundColor: t.colors[colorName][variant](index)\n                    }}\n                    title={`theme.colors.${String(colorName)}.${String(variant)}(${index}) = ${t.colors[colorName][variant](index)}`}\n                  >\n                    <code>{index}</code>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8914:e=>{e.exports="import React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport {\n  type AppTheme,\n  type AppThemeSettingsPalette,\n  createAppTheme\n} from '@arwes/theme';\n\n// Custom color palette generator.\nconst createThemePalette = (hue: number): AppThemeSettingsPalette => ({\n  // Darkening colors.\n  main: (i: number) => [hue, 80 + i, 92.5 - i * 9.44],\n  text: (i: number) => [hue, 20 + i, 92.5 - i * 9.44],\n\n  // Lightening colors.\n  deco: (i: number) => [hue, 80 + i, 50, 0.025 + i * 0.025],\n  bg: (i: number) => [hue, 20 + i, 2 + i * 2],\n  ol: (i: number) => [hue, 80 + i, 2 + i * 2]\n});\n\nconst t: AppTheme = createAppTheme({\n  settings: {\n    hues: {\n      primary: 160,\n      secondary: 280\n    },\n    colors: {\n      primary: createThemePalette(160),\n      secondary: createThemePalette(280)\n    }\n  }\n});\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global styles={{\n        html: {\n          margin: '0.5rem',\n          lineHeight: 1.5,\n          color: '#ddd',\n          backgroundColor: '#111'\n        },\n        'h1, h2, h3': {\n          margin: 0\n        }\n      }} />\n\n      <h1><code>colors</code></h1>\n\n      {(Object.keys(t.colors) as unknown as Array<keyof AppTheme['colors']>).map(colorName => (\n        <div key={colorName}>\n          <h2><code>{colorName}</code></h2>\n\n          {(Object.keys(t.colors[colorName]) as unknown as Array<keyof AppTheme['colors'][typeof colorName]>).map(variant => (\n            <div key={variant}>\n              <h3>{variant}</h3>\n              <div style={{\n                display: 'flex',\n                flexDirection: 'row'\n              }}>\n                {Array(10).fill(null).map((_, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      flex: 1,\n                      height: 40,\n                      backgroundColor: t.colors[colorName][variant](index)\n                    }}\n                    title={`theme.colors.${String(colorName)}.${String(variant)}(${index}) = ${t.colors[colorName][variant](index)}`}\n                  >\n                    <code>{index}</code>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},4485:e=>{e.exports="import React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport {\n  type ThemeSettingsUnit,\n  type ThemeUnit,\n  type AppThemeSettingsPalette,\n  type AppThemeSettings,\n  type AppThemePalette,\n  type AppTheme,\n  APP_THEME_STRUCTURE_PALETTE,\n  createAppThemePalette,\n  createAppTheme\n} from '@arwes/theme';\n\n// Settings Extension\n\ntype AppThemeSettingsColors = AppThemeSettings['colors'];\ninterface AppTheme2SettingsColors extends AppThemeSettingsColors {\n  complementary: AppThemeSettingsPalette\n}\ninterface AppTheme2Settings extends Omit<AppThemeSettings, 'colors'> {\n  radius: ThemeSettingsUnit\n  colors: AppTheme2SettingsColors\n}\n\n// Theme Extension\n\ntype AppThemeColors = AppTheme['colors'];\ninterface AppTheme2Colors extends AppThemeColors {\n  complementary: AppThemePalette\n}\ninterface AppTheme2 extends Omit<AppTheme, 'colors'> {\n  radius: ThemeUnit\n  colors: AppTheme2Colors\n}\n\n// Theme Creation\n\nconst t = createAppTheme<AppTheme2Settings, AppTheme2>({\n  structure: {\n    radius: 'unit',\n    colors: {\n      complementary: APP_THEME_STRUCTURE_PALETTE\n    }\n  },\n  settings: {\n    radius: (i: number) => `${0.5 * i}rem`,\n    colors: {\n      complementary: createAppThemePalette(330)\n    }\n  }\n});\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global styles={{\n        html: {\n          margin: t.space(2),\n          lineHeight: 1.6,\n          backgroundColor: t.colors.primary.ol(1)\n        },\n        h1: {\n          ...t.typography.title(0),\n          margin: t.space([0, 0, 4]),\n          color: t.colors.primary.text(4),\n          background: `-webkit-linear-gradient(\n            0deg,\n            ${t.colors.primary.main(4)},\n            ${t.colors.complementary.main(4)}\n          )`,\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent'\n        },\n        hr: {\n          margin: t.space([0, 0, 4]),\n          border: 'none',\n          height: 2,\n          background: `linear-gradient(\n            90deg,\n            ${t.colors.primary.deco(5)},\n            ${t.colors.complementary.deco(10)}\n          )`\n        },\n        p: {\n          margin: t.space([0, 0, 4]),\n          ...t.typography.body(1),\n          color: t.colors.primary.text(4)\n        },\n        img: {\n          margin: 0,\n          maxWidth: '100%',\n          borderRadius: t.space(2)\n        }\n      }} />\n\n      <main style={{\n        border: `1px solid ${t.colors.primary.deco(5)}`,\n        padding: t.space([4, 8]),\n        maxWidth: 400,\n        borderRadius: t.space(4),\n        background: `linear-gradient(\n          to bottom right,\n          ${t.colors.primary.ol(2)},\n          ${t.colors.primary.ol(4)}\n        )`\n      }}>\n        <h1>Arwes Framework</h1>\n        <hr />\n        <p>\n          Arwes is a web framework to build user interfaces based on futuristic\n          science fiction designs, animations, and sound effects. The concepts\n          behind are opinionated with influences from Cyberprep and Synthwave,\n          and productions like Star Citizen, Halo, and TRON: Legacy. It tries to\n          inspire advanced science and technology.\n        </p>\n        <img src=\"/assets/images/background-large.jpg\" />\n      </main>\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9159:e=>{e.exports="import React, { type ReactElement, Fragment, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport {\n  type ThemeSettingsUnit,\n  type ThemeSettingsMultiplier,\n  type ThemeSettingsColor,\n  type ThemeSettingsStyle,\n  type ThemeUnit,\n  type ThemeMultiplier,\n  type ThemeColor,\n  type ThemeStyle,\n  type ThemeCreatorStructure,\n  createCreateTheme\n} from '@arwes/theme';\n\ninterface ThemeSettings {\n  space: ThemeSettingsUnit\n  outline: ThemeSettingsMultiplier\n  font: ThemeSettingsStyle\n  color: {\n    primary: ThemeSettingsColor\n    secondary: ThemeSettingsColor\n  }\n}\n\ninterface Theme {\n  space: ThemeUnit\n  outline: ThemeMultiplier\n  font: ThemeStyle\n  color: {\n    primary: ThemeColor\n    secondary: ThemeColor\n  }\n}\n\nconst themeStructure: ThemeCreatorStructure = {\n  space: 'multiplier',\n  outline: 'multiplier',\n  font: 'style',\n  color: {\n    primary: 'color',\n    secondary: 'color'\n  }\n};\n\nconst themeDefaults: ThemeSettings = {\n  // Values to be multiplied by a provided integer.\n  space: i => `${i}rem`,\n  outline: 1,\n  // A list of styles with any CSS properties.\n  font: [\n    { fontFamily: 'monospace', fontSize: '30px' },\n    { fontFamily: 'sans-serif', fontSize: '21px' }\n  ],\n  color: {\n    // A function to return a HSLA value as [number, number, number, number?].\n    primary: i => [180, 70, i * 5, 1],\n    secondary: i => [60, 70, i * 5, 1]\n  }\n};\n\nconst createTheme = createCreateTheme<ThemeSettings, Theme>(themeStructure, themeDefaults);\n\nconst Sandbox = (): ReactElement => {\n  const theme: Theme = useMemo(() => {\n    const themeExtensions = {\n      outline: 3\n    };\n    const theme = createTheme(themeExtensions);\n    return theme;\n  }, []);\n\n  return (\n    <Fragment>\n      <Global styles={{\n        html: {\n          margin: theme.space(2),\n          backgroundColor: theme.color.primary(1)\n        },\n        h1: {\n          ...theme.font(0),\n          marginBottom: theme.space(1),\n          borderBottomWidth: theme.outline(1),\n          borderBottomStyle: 'solid',\n          borderBottomColor: theme.color.primary(10),\n          paddingBottom: theme.space(1),\n          color: theme.color.primary(16)\n        },\n        p: {\n          ...theme.font(1),\n          color: theme.color.secondary(16)\n        }\n      }} />\n      <h1>Arwes Framework</h1>\n      <p>Futuristic Sci-Fi UI Web Framework</p>\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8155:e=>{e.exports="// Change the browser viewport width to test.\n\nimport React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport { createThemeBreakpoints } from '@arwes/theme';\n\nconst bps = createThemeBreakpoints();\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global\n        styles={{\n          '.box': {\n            margin: 20,\n            width: 150,\n            height: 150,\n            backgroundColor: 'cyan',\n\n            [bps.up('400px')]: {\n              backgroundColor: 'magenta'\n            },\n            [bps.up('800px')]: {\n              backgroundColor: 'yellow'\n            },\n            [bps.up('1200px')]: {\n              backgroundColor: 'green'\n            },\n\n            [bps.down('800px')]: {\n              borderRadius: '30%'\n            },\n\n            [bps.between('800px', '1200px')]: {\n              transform: 'skew(-10deg)'\n            }\n          }\n        }}\n      />\n      <div className='box' />\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},9304:e=>{e.exports="// Change the browser viewport width to test.\n\nimport React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport { createThemeBreakpoints } from '@arwes/theme';\n\nconst bps = createThemeBreakpoints([\n  { key: 'small', value: '400px' },\n  { key: 'medium', value: '800px' },\n  { key: 'large', value: '1200px' }\n]);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global\n        styles={{\n          '.box': {\n            margin: 20,\n            width: 150,\n            height: 150,\n            backgroundColor: 'cyan',\n\n            [bps.up('small')]: {\n              backgroundColor: 'magenta'\n            },\n            [bps.up('medium')]: {\n              backgroundColor: 'yellow'\n            },\n            [bps.up('large')]: {\n              backgroundColor: 'green'\n            },\n\n            [bps.down('medium')]: {\n              borderRadius: '30%'\n            },\n\n            [bps.between('medium', 'large')]: {\n              transform: 'skew(-10deg)'\n            }\n          }\n        }}\n      />\n      <div className='box' />\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},839:e=>{e.exports="// Change the browser viewport width to test.\n\nimport React, { type ReactElement, Fragment } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Global } from '@emotion/react';\nimport { createThemeBreakpoints } from '@arwes/theme';\n\nconst bps = createThemeBreakpoints([\n  '400px',\n  '800px',\n  '1200px'\n]);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <Fragment>\n      <Global\n        styles={{\n          '.box': {\n            margin: 20,\n            width: 150,\n            height: 150,\n            backgroundColor: 'cyan',\n\n            [bps.up(0)]: {\n              backgroundColor: 'magenta'\n            },\n            [bps.up(1)]: {\n              backgroundColor: 'yellow'\n            },\n            [bps.up(2)]: {\n              backgroundColor: 'green'\n            },\n\n            [bps.down(1)]: {\n              borderRadius: '30%'\n            },\n\n            [bps.between(1, 2)]: {\n              transform: 'skew(-10deg)'\n            }\n          }\n        }}\n      />\n      <div className='box' />\n    </Fragment>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8415:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createThemeColor } from '@arwes/theme';\n\n// Calculated color alpha is always 0.5.\nconst color = createThemeColor(() => [180, 100, 75, 0.5]);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 1fr)',\n        gridTemplateRows: '1fr',\n        width: 200,\n        height: 100\n      }}\n    >\n      {/* Adjust color alpha value proportional to the calculated value. */}\n      <div style={{ background: color(0) }} />\n      <div style={{ background: color(0, { alpha: 1 }) }} />\n      <div style={{ background: color(0, { alpha: 0.5 }) }} />\n      <div style={{ background: color(0, { alpha: 0.25 }) }} />\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},3556:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createThemeColor } from '@arwes/theme';\n\n// A function to return a HSLA value as [number, number, number, number?],\n// representing [hue, saturation, lightness, alpha channel].\n// See https://developer.mozilla.org/en-US/docs/web/css/color_value/hsla\n// This specific function will create values for 0 to 20 multiplier value provided\n// with variation of the lightness.\nconst color = createThemeColor(i => [180, 75, i * 5, 1]);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'row'\n      }}\n    >\n      {Array(20).fill(0).map((_, variantIndex) => (\n        <div\n          key={variantIndex}\n          style={{\n            width: 20,\n            height: 100,\n            background: color(variantIndex)\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},8514:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createThemeColor } from '@arwes/theme';\n\n// All colors will work from 0 to 20 variant/multiplier index.\nconst colors = [\n  // Variations of hue.\n  createThemeColor(i => [i * 18, 50, 50, 1]),\n  // Variations of saturation.\n  createThemeColor(i => [180, i * 5, 50, 1]),\n  // Variations of lightness.\n  createThemeColor(i => [180, 50, i * 5, 1]),\n  // Variations of opacity.\n  createThemeColor(i => [180, 50, 50, i * 0.05])\n];\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div>\n      {Array(4).fill(0).map((_, colorIndex) => (\n        <div\n          key={colorIndex}\n          style={{\n            display: 'flex',\n            flexDirection: 'row'\n          }}\n        >\n          {Array(20).fill(0).map((_, variantIndex) => (\n            <div\n              key={variantIndex}\n              style={{\n                width: 20,\n                height: 100,\n                background: colors[colorIndex](variantIndex)\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},7826:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createThemeStyle } from '@arwes/theme';\n\nconst style = createThemeStyle([\n  { fontSize: '30px', color: 'red' },\n  { fontSize: '24px', color: 'blue' },\n  { fontSize: '18px', color: 'green' }\n]);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div>\n      <p style={{ ...style(0) }}>Futuristic Sci-Fi UI Web Framework</p>\n      <p style={{ ...style(1) }}>Futuristic Sci-Fi UI Web Framework</p>\n      <p style={{ ...style(2) }}>Futuristic Sci-Fi UI Web Framework</p>\n      <p style={{ ...style(3) }}>Futuristic Sci-Fi UI Web Framework</p>\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"},1147:e=>{e.exports="import React, { type ReactElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { createThemeUnit } from '@arwes/theme';\n\nconst size = createThemeUnit(i => `${10 + 10 * i}px`);\n\nconst Sandbox = (): ReactElement => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'row'\n      }}\n    >\n      {Array(5).fill(0).map((_, variantIndex) => (\n        <div\n          key={variantIndex}\n          style={{\n            margin: 10,\n            width: size(variantIndex),\n            height: size(variantIndex),\n            background: '#0ff'\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ncreateRoot(document.querySelector('#root') as HTMLElement).render(<Sandbox />);\n"}}]);